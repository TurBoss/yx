;; put glyph
		;; inputs:	b=y, c=x
		;;		d=bytes per glyph line
		;;		e=glyph lines
		;;		hl'=glyph address
		;;		de'=glyph mask
vid_putglyph::	
		call	vid_rowaddr	; hl=vmem address, a=l=0
		push	af		; loop terminator for a==0
		ld	b,c		; store x0
		srl	c		; c=x0/8 (byte offset)
		srl	c
		srl	c	
		add	c
		ld	l,a		; hl is correct vmem 
		; nr. shifts to b
		ld	a,b		; a=x0
		and	#0x07		; a=nr. shifts for x...	
		ld	b,a		; to b
pg_push_rows:	; push all row starts to stack
		push	hl		; push row address
		dec	e
		jr	z,pg_rows_pshed		
		call	vid_nextrow	; calculate next row
		jr	pg_push_rows	; repeat
pg_rows_pshed:	; prepare glyph and mask
		ld	hl,#0x0000	; hl for shifting
		push	hl		; last values for shifting
pg_col_loop:	
		exx			; alt. set on
		ld	b,(hl)		; b=glyph byte
		ex	de,hl
		ld	c,(hl)		; c=mask byte
		push	bc		; to stack		
		ex	de,hl
		inc	hl		; next glyph byte
		inc	de		; next mask byte
		exx
	
		; shifting
		ld	a,b 
		pop	bc		; get bc
		pop	de		; prev. mask
		push	af		; remember b counter
		cp	#0		; no shifts?
		jr	z,pg_shf_end

		ld	hl,#0x0000
pg_shf_loop:	; shift loop	
		srl	b		; shift byte
		rr	h		; next byte remainder
		srl	c		; shift mask
		rr	l		; next byte reminder
		dec	a
		jr	nz,pg_shf_loop
			
pg_shf_end:	; b=byte, c=mask
		push	hl		; new shift values
		ld	a,b		; glyph byte to a
		or	d
		and	c		; through the mask
		and	e
		or	(hl)		; combine with background
		ld	(hl),a		; to video memory
		inc	hl		; next byte
		pop	bc		; b=counter (x0)

		

pg_next_row:
		pop	de		; get de
		ld	a,e		; get lower to a
		cp	#0		; is terminator?
		jr	z,pg_done
		pop	hl		; next row
		jr	
pg_done:	
		pop	hl		; clear stack
		ret
		


w_glyph::	;; character: 'W' (87)
		.db	0b11111111, 0b11111000
		.db	0b00000000, 0b00000000
		.db	0b00000000, 0b00000000
		.db	0b00000000, 0b00000000
		.db	0b11110111, 0b01111000
		.db	0b11110111, 0b01111000
		.db	0b11110111, 0b01111000
		.db	0b11110111, 0b01111000
		.db	0b11110111, 0b01111000
		.db	0b11110111, 0b01111000
		.db	0b11110111, 0b01111000
		.db	0b11110111, 0b01111000
		.db	0b11110111, 0b01110000
		.db	0b11111111, 0b11100000
		.db	0b00000000, 0b00000000
		.db	13



