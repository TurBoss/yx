
private int FindAffected(Rectangle rect, int i) 
        { 
            while (i>=0) 
            { // Still rects to test? 
                if (rect.IntersectsWith(_rects[i])) 
                { 
                    // First get the intersect. 
                    Rectangle intersect; 
                    intersect = new Rectangle(rect.Left, rect.Top, rect.Width, rect.Height); 
                    intersect.Intersect(_rects[i]);
 
                    if (_inters.Count == _interCount) return -1; 
                    _inters.Add(new InterRect() { Rectangle = intersect, Brush = _interBrushes[i] }); 

                    if (i > 0) // Not last rect? 
                    { 
                        // Now get all subrects. 
                        int n = 0; 
                        List<Rectangle> subrects = new List<Rectangle>(); 
                        SubRects(rect, intersect, subrects, ref n); 
                        if (n == 0) return i; 

                        // Remove rect that we already tested. 
                        int minDepth = i - 1; 
                        for (int j = 0; j < n; j++) minDepth = Math.Min(minDepth, FindAffected(subrects[j], i - 1)); 
                        i = minDepth; 
                    } 
                    else 
                    { 
                        return -1; 
                    } 
                } 
                else i--; // Test next rect. 
            } 
            return i; 
        } 


/*

	w1=window_create(
		"Editor",
		window_desktop,
		WF_HASTITLE|WF_HASBORDER,
		app_wnd_proc,
		2,
		2,
		80,
		50);
	w2=window_create(
		"Clock",
		window_desktop,
		WF_HASTITLE|WF_HASBORDER,
		app_wnd_proc,
		60,
		35,
		200,
		160);

	window_draw(window_desktop);
*/



/*
	mouse_info_t mi;
	byte mx,my;

	byte curndx=0;
	void* cursors[]={ &cur_std, &cur_classic, &cur_hourglass, &cur_caret, &cur_hand };

	window_init();

	mouse_calibrate(SCREEN_MAXX>>1,SCREEN_MAXY>>1);

	mouse_scan(&mi);
	mx=mi.x;
	my=mi.y;
	mouse_show_cursor(mi.x, mi.y, &cur_std);
	while (TRUE) {
		mouse_scan(&mi);
		if (mx!=mi.x || my!=mi.y) { 
			mouse_hide_cursor();
			mouse_show_cursor(mi.x, mi.y, cursors[curndx]);
			mx=mi.x;
			my=mi.y;
		}
		if (mi.button_change) {
			curndx++;
			if (curndx==5) curndx=0;
		}
	}

*/





/*	
	window_t* w11;
	window_t* w21;
	window_t* wactive;

	w11=window_create(
		NULL,
		w1,
		WF_HASBORDER,
		control_wnd_proc,
		20,
		15,
		30,
		35);

	w21=window_create(
		NULL,
		w2,
		WF_HASBORDER,
		control_wnd_proc,
		20,
		20,
		40,
		50);

	wactive=w1;
	while(TRUE) {
		window_select(wactive);
		window_draw(window_desktop);
		if (wactive==w1) wactive=w2; else wactive=w1;
	}
*/
