                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.1.0 #7066 (Jun 14 2012) (Linux)
                              4 ; This file was generated Tue Nov 27 20:50:39 2012
                              5 ;--------------------------------------------------------
                              6 	.module test
                              7 	.optsdcc -mz80
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _g_clip_margins
                             13 	.globl _g_translate_coordinates
                             14 	.globl _main
                             15 	.globl _ocra_font
                             16 	.globl _sinserif_font
                             17 	.globl _liquid_font
                             18 	.globl _c64_font
                             19 	.globl _c60s_font
                             20 	.globl _cour_new_font
                             21 	.globl _envy_font
                             22 	.globl _chicago_font
                             23 	.globl _fnt_get_font_info
                             24 	.globl _last_error
                             25 	.globl _delta_g
                             26 	.globl _screen_rect
                             27 	.globl _shadow_screen
                             28 	.globl _screen
                             29 	.globl _g_draw_text
                             30 	.globl _g_draw_clipped_glyph
                             31 	.globl _g_init
                             32 	.globl _directg_realize
                             33 	.globl _mem_copy
                             34 	.globl _string_length
                             35 	.globl _mem_set
                             36 	.globl _directg_vmem_addr
                             37 	.globl _directg_vmem_nextrow_addr
                             38 	.globl _shift_buffer_right
                             39 	.globl _directg_aligned_glyph_16x16
                             40 	.globl _directg_render_masked_glyph_16x16
                             41 ;--------------------------------------------------------
                             42 ; special function registers
                             43 ;--------------------------------------------------------
                             44 ;--------------------------------------------------------
                             45 ;  ram data
                             46 ;--------------------------------------------------------
                             47 	.area _DATA
   0000                      48 _screen::
   0000                      49 	.ds 2
   0002                      50 _shadow_screen::
   0002                      51 	.ds 2
   0004                      52 _screen_rect::
   0004                      53 	.ds 4
   0008                      54 _delta_g::
   0008                      55 	.ds 2
   000A                      56 _last_error::
   000A                      57 	.ds 1
                             58 ;--------------------------------------------------------
                             59 ; overlayable items in  ram 
                             60 ;--------------------------------------------------------
                             61 	.area _OVERLAY
                             62 ;--------------------------------------------------------
                             63 ; external initialized ram data
                             64 ;--------------------------------------------------------
                             65 ;--------------------------------------------------------
                             66 ; global & static initialisations
                             67 ;--------------------------------------------------------
                             68 	.area _HOME
                             69 	.area _GSINIT
                             70 	.area _GSFINAL
                             71 	.area _GSINIT
                             72 ;test.c:15: result last_error = RESULT_SUCCESS; /* last error, 0 = success */
   0000 FD 21r0As00          73 	ld	iy,#_last_error
   0004 FD 36 00 00          74 	ld	0 (iy),#0x00
                             75 ;--------------------------------------------------------
                             76 ; Home
                             77 ;--------------------------------------------------------
                             78 	.area _HOME
                             79 	.area _HOME
                             80 ;--------------------------------------------------------
                             81 ; code
                             82 ;--------------------------------------------------------
                             83 	.area _CODE
                             84 ;test.c:18: void main() {
                             85 ;	---------------------------------
                             86 ; Function main
                             87 ; ---------------------------------
   0000                      88 _main_start::
   0000                      89 _main:
   0000 DD E5                90 	push	ix
   0002 DD 21 00 00          91 	ld	ix,#0
   0006 DD 39                92 	add	ix,sp
   0008 21 F6 FF             93 	ld	hl,#-10
   000B 39                   94 	add	hl,sp
   000C F9                   95 	ld	sp,hl
                             96 ;test.c:24: g_init(); /* initialize graphics */
   000D CDr20s08             97 	call	_g_init
                             98 ;test.c:27: g.clip_rect = &screen_rect;
   0010 21 04 00             99 	ld	hl,#0x0004
   0013 39                  100 	add	hl,sp
   0014 5C                  101 	ld	e, h
   0015 63                  102 	ld	h,e
   0016 36r04               103 	ld	(hl),#<(_screen_rect)
   0018 23                  104 	inc	hl
   0019 36s00               105 	ld	(hl),#>(_screen_rect)
                            106 ;test.c:28: g.delta_g = 0;
   001B 21 04 00            107 	ld	hl,#0x0004
   001E 39                  108 	add	hl,sp
   001F 5D                  109 	ld	e,l
   0020 54                  110 	ld	d,h
   0021 23                  111 	inc	hl
   0022 23                  112 	inc	hl
   0023 AF                  113 	xor	a, a
   0024 77                  114 	ld	(hl), a
   0025 23                  115 	inc	hl
   0026 77                  116 	ld	(hl), a
                            117 ;test.c:29: g.coord_sys = NULL; /* absolute coordinates */
   0027 21 04 00            118 	ld	hl,#0x0004
   002A 19                  119 	add	hl,de
   002B AF                  120 	xor	a, a
   002C 77                  121 	ld	(hl), a
   002D 23                  122 	inc	hl
   002E 77                  123 	ld	(hl), a
                            124 ;test.c:31: mstart=screen;
   002F ED 5Br00s00         125 	ld	de,(_screen)
                            126 ;test.c:32: mem_set(mstart, 0b00000000, VIDEO_MEM_SIZE);
   0033 D5                  127 	push	de
   0034 21 00 18            128 	ld	hl,#0x1800
   0037 E5                  129 	push	hl
   0038 3E 00               130 	ld	a,#0x00
   003A F5                  131 	push	af
   003B 33                  132 	inc	sp
   003C D5                  133 	push	de
   003D CDr14s09            134 	call	_mem_set
   0040 F1                  135 	pop	af
   0041 F1                  136 	pop	af
   0042 33                  137 	inc	sp
   0043 D1                  138 	pop	de
                            139 ;test.c:33: mstart+=VIDEO_MEM_SIZE;
   0044 21 00 18            140 	ld	hl,#0x1800
   0047 19                  141 	add	hl,de
   0048 EB                  142 	ex	de,hl
                            143 ;test.c:34: mem_set(mstart, 0b00111000, ATTR_MEM_SIZE);
   0049 21 00 03            144 	ld	hl,#0x0300
   004C E5                  145 	push	hl
   004D 3E 38               146 	ld	a,#0x38
   004F F5                  147 	push	af
   0050 33                  148 	inc	sp
   0051 D5                  149 	push	de
   0052 CDr14s09            150 	call	_mem_set
   0055 F1                  151 	pop	af
   0056 F1                  152 	pop	af
   0057 33                  153 	inc	sp
                            154 ;test.c:36: POPULATE_RECT((g.clip_rect),0,0,255,191)
   0058 21 04 00            155 	ld	hl,#0x0004
   005B 39                  156 	add	hl,sp
   005C 55                  157 	ld	d,l
   005D 44                  158 	ld	b,h
   005E 7E                  159 	ld	a,(hl)
   005F 23                  160 	inc	hl
   0060 66                  161 	ld	h,(hl)
   0061 6F                  162 	ld	l,a
   0062 36 00               163 	ld	(hl),#0x00
   0064 6A                  164 	ld	l,d
   0065 60                  165 	ld	h,b
   0066 5E                  166 	ld	e,(hl)
   0067 23                  167 	inc	hl
   0068 56                  168 	ld	d,(hl)
   0069 6B                  169 	ld	l,e
   006A 62                  170 	ld	h,d
   006B 23                  171 	inc	hl
   006C 36 00               172 	ld	(hl),#0x00
   006E 6B                  173 	ld	l,e
   006F 62                  174 	ld	h,d
   0070 23                  175 	inc	hl
   0071 23                  176 	inc	hl
   0072 36 FF               177 	ld	(hl),#0xFF
   0074 13                  178 	inc	de
   0075 13                  179 	inc	de
   0076 13                  180 	inc	de
   0077 3E BF               181 	ld	a,#0xBF
   0079 12                  182 	ld	(de),a
                            183 ;test.c:38: POPULATE_RECT((&r),0,0,MAX_X,10)
   007A 21 00 00            184 	ld	hl,#0x0000
   007D 39                  185 	add	hl,sp
   007E 36 00               186 	ld	(hl),#0x00
   0080 21 00 00            187 	ld	hl,#0x0000
   0083 39                  188 	add	hl,sp
   0084 4D                  189 	ld	c,l
   0085 44                  190 	ld	b,h
   0086 23                  191 	inc	hl
   0087 36 00               192 	ld	(hl),#0x00
   0089 69                  193 	ld	l,c
   008A 60                  194 	ld	h,b
   008B 23                  195 	inc	hl
   008C 23                  196 	inc	hl
   008D 36 FF               197 	ld	(hl),#0xFF
   008F 69                  198 	ld	l,c
   0090 60                  199 	ld	h,b
   0091 23                  200 	inc	hl
   0092 23                  201 	inc	hl
   0093 23                  202 	inc	hl
   0094 36 0A               203 	ld	(hl),#0x0A
                            204 ;test.c:39: g_draw_text(&g,liquid_font(),"This is liquid font! ABCDE",&r);
   0096 C5                  205 	push	bc
   0097 CDr00s00            206 	call	_liquid_font
   009A C1                  207 	pop	bc
   009B EB                  208 	ex	de,hl
   009C FD 21 04 00         209 	ld	iy,#0x0004
   00A0 FD 39               210 	add	iy,sp
   00A2 C5                  211 	push	bc
   00A3 21r33s02            212 	ld	hl,#__str_0
   00A6 E5                  213 	push	hl
   00A7 D5                  214 	push	de
   00A8 FD E5               215 	push	iy
   00AA CDrEAs03            216 	call	_g_draw_text
   00AD F1                  217 	pop	af
   00AE F1                  218 	pop	af
   00AF F1                  219 	pop	af
   00B0 F1                  220 	pop	af
                            221 ;test.c:40: POPULATE_RECT((&r),0,10,MAX_X,20)
   00B1 21 00 00            222 	ld	hl,#0x0000
   00B4 39                  223 	add	hl,sp
   00B5 36 00               224 	ld	(hl),#0x00
   00B7 21 00 00            225 	ld	hl,#0x0000
   00BA 39                  226 	add	hl,sp
   00BB 4D                  227 	ld	c,l
   00BC 44                  228 	ld	b,h
   00BD 23                  229 	inc	hl
   00BE 36 0A               230 	ld	(hl),#0x0A
   00C0 69                  231 	ld	l,c
   00C1 60                  232 	ld	h,b
   00C2 23                  233 	inc	hl
   00C3 23                  234 	inc	hl
   00C4 36 FF               235 	ld	(hl),#0xFF
   00C6 69                  236 	ld	l,c
   00C7 60                  237 	ld	h,b
   00C8 23                  238 	inc	hl
   00C9 23                  239 	inc	hl
   00CA 23                  240 	inc	hl
   00CB 36 14               241 	ld	(hl),#0x14
                            242 ;test.c:41: g_draw_text(&g,c64_font(),"This is c64 font! ABCDE",&r);
   00CD C5                  243 	push	bc
   00CE CDr00s00            244 	call	_c64_font
   00D1 C1                  245 	pop	bc
   00D2 EB                  246 	ex	de,hl
   00D3 FD 21 04 00         247 	ld	iy,#0x0004
   00D7 FD 39               248 	add	iy,sp
   00D9 C5                  249 	push	bc
   00DA 21r4Es02            250 	ld	hl,#__str_1
   00DD E5                  251 	push	hl
   00DE D5                  252 	push	de
   00DF FD E5               253 	push	iy
   00E1 CDrEAs03            254 	call	_g_draw_text
   00E4 F1                  255 	pop	af
   00E5 F1                  256 	pop	af
   00E6 F1                  257 	pop	af
   00E7 F1                  258 	pop	af
                            259 ;test.c:42: POPULATE_RECT((&r),0,20,MAX_X,30)
   00E8 21 00 00            260 	ld	hl,#0x0000
   00EB 39                  261 	add	hl,sp
   00EC 36 00               262 	ld	(hl),#0x00
   00EE 21 00 00            263 	ld	hl,#0x0000
   00F1 39                  264 	add	hl,sp
   00F2 4D                  265 	ld	c,l
   00F3 44                  266 	ld	b,h
   00F4 23                  267 	inc	hl
   00F5 36 14               268 	ld	(hl),#0x14
   00F7 69                  269 	ld	l,c
   00F8 60                  270 	ld	h,b
   00F9 23                  271 	inc	hl
   00FA 23                  272 	inc	hl
   00FB 36 FF               273 	ld	(hl),#0xFF
   00FD 69                  274 	ld	l,c
   00FE 60                  275 	ld	h,b
   00FF 23                  276 	inc	hl
   0100 23                  277 	inc	hl
   0101 23                  278 	inc	hl
   0102 36 1E               279 	ld	(hl),#0x1E
                            280 ;test.c:43: g_draw_text(&g,c60s_font(),"This is c60s font! ABCDE",&r);
   0104 C5                  281 	push	bc
   0105 CDr00s00            282 	call	_c60s_font
   0108 C1                  283 	pop	bc
   0109 EB                  284 	ex	de,hl
   010A FD 21 04 00         285 	ld	iy,#0x0004
   010E FD 39               286 	add	iy,sp
   0110 C5                  287 	push	bc
   0111 21r66s02            288 	ld	hl,#__str_2
   0114 E5                  289 	push	hl
   0115 D5                  290 	push	de
   0116 FD E5               291 	push	iy
   0118 CDrEAs03            292 	call	_g_draw_text
   011B F1                  293 	pop	af
   011C F1                  294 	pop	af
   011D F1                  295 	pop	af
   011E F1                  296 	pop	af
                            297 ;test.c:44: POPULATE_RECT((&r),0,30,MAX_X,40)
   011F 21 00 00            298 	ld	hl,#0x0000
   0122 39                  299 	add	hl,sp
   0123 36 00               300 	ld	(hl),#0x00
   0125 21 00 00            301 	ld	hl,#0x0000
   0128 39                  302 	add	hl,sp
   0129 4D                  303 	ld	c,l
   012A 44                  304 	ld	b,h
   012B 23                  305 	inc	hl
   012C 36 1E               306 	ld	(hl),#0x1E
   012E 69                  307 	ld	l,c
   012F 60                  308 	ld	h,b
   0130 23                  309 	inc	hl
   0131 23                  310 	inc	hl
   0132 36 FF               311 	ld	(hl),#0xFF
   0134 69                  312 	ld	l,c
   0135 60                  313 	ld	h,b
   0136 23                  314 	inc	hl
   0137 23                  315 	inc	hl
   0138 23                  316 	inc	hl
   0139 36 28               317 	ld	(hl),#0x28
                            318 ;test.c:45: g_draw_text(&g,cour_new_font(),"This is courier new font! ABCDE",&r);
   013B C5                  319 	push	bc
   013C CDr00s00            320 	call	_cour_new_font
   013F C1                  321 	pop	bc
   0140 EB                  322 	ex	de,hl
   0141 FD 21 04 00         323 	ld	iy,#0x0004
   0145 FD 39               324 	add	iy,sp
   0147 C5                  325 	push	bc
   0148 21r7Fs02            326 	ld	hl,#__str_3
   014B E5                  327 	push	hl
   014C D5                  328 	push	de
   014D FD E5               329 	push	iy
   014F CDrEAs03            330 	call	_g_draw_text
   0152 F1                  331 	pop	af
   0153 F1                  332 	pop	af
   0154 F1                  333 	pop	af
   0155 F1                  334 	pop	af
                            335 ;test.c:46: POPULATE_RECT((&r),0,40,MAX_X,50)
   0156 21 00 00            336 	ld	hl,#0x0000
   0159 39                  337 	add	hl,sp
   015A 36 00               338 	ld	(hl),#0x00
   015C 21 00 00            339 	ld	hl,#0x0000
   015F 39                  340 	add	hl,sp
   0160 4D                  341 	ld	c,l
   0161 44                  342 	ld	b,h
   0162 23                  343 	inc	hl
   0163 36 28               344 	ld	(hl),#0x28
   0165 69                  345 	ld	l,c
   0166 60                  346 	ld	h,b
   0167 23                  347 	inc	hl
   0168 23                  348 	inc	hl
   0169 36 FF               349 	ld	(hl),#0xFF
   016B 69                  350 	ld	l,c
   016C 60                  351 	ld	h,b
   016D 23                  352 	inc	hl
   016E 23                  353 	inc	hl
   016F 23                  354 	inc	hl
   0170 36 32               355 	ld	(hl),#0x32
                            356 ;test.c:47: g_draw_text(&g,envy_font(),"This is envy font! ABCDE",&r);
   0172 C5                  357 	push	bc
   0173 CDr00s00            358 	call	_envy_font
   0176 C1                  359 	pop	bc
   0177 EB                  360 	ex	de,hl
   0178 FD 21 04 00         361 	ld	iy,#0x0004
   017C FD 39               362 	add	iy,sp
   017E C5                  363 	push	bc
   017F 21r9Fs02            364 	ld	hl,#__str_4
   0182 E5                  365 	push	hl
   0183 D5                  366 	push	de
   0184 FD E5               367 	push	iy
   0186 CDrEAs03            368 	call	_g_draw_text
   0189 F1                  369 	pop	af
   018A F1                  370 	pop	af
   018B F1                  371 	pop	af
   018C F1                  372 	pop	af
                            373 ;test.c:48: POPULATE_RECT((&r),0,50,MAX_X,60)
   018D 21 00 00            374 	ld	hl,#0x0000
   0190 39                  375 	add	hl,sp
   0191 36 00               376 	ld	(hl),#0x00
   0193 21 00 00            377 	ld	hl,#0x0000
   0196 39                  378 	add	hl,sp
   0197 4D                  379 	ld	c,l
   0198 44                  380 	ld	b,h
   0199 23                  381 	inc	hl
   019A 36 32               382 	ld	(hl),#0x32
   019C 69                  383 	ld	l,c
   019D 60                  384 	ld	h,b
   019E 23                  385 	inc	hl
   019F 23                  386 	inc	hl
   01A0 36 FF               387 	ld	(hl),#0xFF
   01A2 69                  388 	ld	l,c
   01A3 60                  389 	ld	h,b
   01A4 23                  390 	inc	hl
   01A5 23                  391 	inc	hl
   01A6 23                  392 	inc	hl
   01A7 36 3C               393 	ld	(hl),#0x3C
                            394 ;test.c:49: g_draw_text(&g,ocra_font(),"This is ocra font! ABCDE",&r);
   01A9 C5                  395 	push	bc
   01AA CDr00s00            396 	call	_ocra_font
   01AD C1                  397 	pop	bc
   01AE EB                  398 	ex	de,hl
   01AF FD 21 04 00         399 	ld	iy,#0x0004
   01B3 FD 39               400 	add	iy,sp
   01B5 C5                  401 	push	bc
   01B6 21rB8s02            402 	ld	hl,#__str_5
   01B9 E5                  403 	push	hl
   01BA D5                  404 	push	de
   01BB FD E5               405 	push	iy
   01BD CDrEAs03            406 	call	_g_draw_text
   01C0 F1                  407 	pop	af
   01C1 F1                  408 	pop	af
   01C2 F1                  409 	pop	af
   01C3 F1                  410 	pop	af
                            411 ;test.c:50: POPULATE_RECT((&r),0,60,MAX_X,70)
   01C4 21 00 00            412 	ld	hl,#0x0000
   01C7 39                  413 	add	hl,sp
   01C8 36 00               414 	ld	(hl),#0x00
   01CA 21 00 00            415 	ld	hl,#0x0000
   01CD 39                  416 	add	hl,sp
   01CE 4D                  417 	ld	c,l
   01CF 44                  418 	ld	b,h
   01D0 23                  419 	inc	hl
   01D1 36 3C               420 	ld	(hl),#0x3C
   01D3 69                  421 	ld	l,c
   01D4 60                  422 	ld	h,b
   01D5 23                  423 	inc	hl
   01D6 23                  424 	inc	hl
   01D7 36 FF               425 	ld	(hl),#0xFF
   01D9 69                  426 	ld	l,c
   01DA 60                  427 	ld	h,b
   01DB 23                  428 	inc	hl
   01DC 23                  429 	inc	hl
   01DD 23                  430 	inc	hl
   01DE 36 46               431 	ld	(hl),#0x46
                            432 ;test.c:51: g_draw_text(&g,sinserif_font(),"This is sinserif font! ABCDE",&r);
   01E0 C5                  433 	push	bc
   01E1 CDr00s00            434 	call	_sinserif_font
   01E4 C1                  435 	pop	bc
   01E5 EB                  436 	ex	de,hl
   01E6 FD 21 04 00         437 	ld	iy,#0x0004
   01EA FD 39               438 	add	iy,sp
   01EC C5                  439 	push	bc
   01ED 21rD1s02            440 	ld	hl,#__str_6
   01F0 E5                  441 	push	hl
   01F1 D5                  442 	push	de
   01F2 FD E5               443 	push	iy
   01F4 CDrEAs03            444 	call	_g_draw_text
   01F7 F1                  445 	pop	af
   01F8 F1                  446 	pop	af
   01F9 F1                  447 	pop	af
   01FA F1                  448 	pop	af
                            449 ;test.c:52: POPULATE_RECT((&r),0,70,MAX_X,80)
   01FB 21 00 00            450 	ld	hl,#0x0000
   01FE 39                  451 	add	hl,sp
   01FF 36 00               452 	ld	(hl),#0x00
   0201 21 00 00            453 	ld	hl,#0x0000
   0204 39                  454 	add	hl,sp
   0205 4D                  455 	ld	c,l
   0206 44                  456 	ld	b,h
   0207 23                  457 	inc	hl
   0208 36 46               458 	ld	(hl),#0x46
   020A 69                  459 	ld	l,c
   020B 60                  460 	ld	h,b
   020C 23                  461 	inc	hl
   020D 23                  462 	inc	hl
   020E 36 FF               463 	ld	(hl),#0xFF
   0210 69                  464 	ld	l,c
   0211 60                  465 	ld	h,b
   0212 23                  466 	inc	hl
   0213 23                  467 	inc	hl
   0214 23                  468 	inc	hl
   0215 36 50               469 	ld	(hl),#0x50
                            470 ;test.c:53: g_draw_text(&g,chicago_font(),"This is chicago font! ABCDE",&r);	
   0217 C5                  471 	push	bc
   0218 CDr00s00            472 	call	_chicago_font
   021B C1                  473 	pop	bc
   021C EB                  474 	ex	de,hl
   021D FD 21 04 00         475 	ld	iy,#0x0004
   0221 FD 39               476 	add	iy,sp
   0223 C5                  477 	push	bc
   0224 21rEEs02            478 	ld	hl,#__str_7
   0227 E5                  479 	push	hl
   0228 D5                  480 	push	de
   0229 FD E5               481 	push	iy
   022B CDrEAs03            482 	call	_g_draw_text
   022E DD F9               483 	ld	sp,ix
   0230 DD E1               484 	pop	ix
   0232 C9                  485 	ret
   0233                     486 _main_end::
   0233                     487 __str_0:
   0233 54 68 69 73 20 69   488 	.ascii "This is liquid font! ABCDE"
        73 20 6C 69 71 75
        69 64 20 66 6F 6E
        74 21 20 41 42 43
        44 45
   024D 00                  489 	.db 0x00
   024E                     490 __str_1:
   024E 54 68 69 73 20 69   491 	.ascii "This is c64 font! ABCDE"
        73 20 63 36 34 20
        66 6F 6E 74 21 20
        41 42 43 44 45
   0265 00                  492 	.db 0x00
   0266                     493 __str_2:
   0266 54 68 69 73 20 69   494 	.ascii "This is c60s font! ABCDE"
        73 20 63 36 30 73
        20 66 6F 6E 74 21
        20 41 42 43 44 45
   027E 00                  495 	.db 0x00
   027F                     496 __str_3:
   027F 54 68 69 73 20 69   497 	.ascii "This is courier new font! ABCDE"
        73 20 63 6F 75 72
        69 65 72 20 6E 65
        77 20 66 6F 6E 74
        21 20 41 42 43 44
        45
   029E 00                  498 	.db 0x00
   029F                     499 __str_4:
   029F 54 68 69 73 20 69   500 	.ascii "This is envy font! ABCDE"
        73 20 65 6E 76 79
        20 66 6F 6E 74 21
        20 41 42 43 44 45
   02B7 00                  501 	.db 0x00
   02B8                     502 __str_5:
   02B8 54 68 69 73 20 69   503 	.ascii "This is ocra font! ABCDE"
        73 20 6F 63 72 61
        20 66 6F 6E 74 21
        20 41 42 43 44 45
   02D0 00                  504 	.db 0x00
   02D1                     505 __str_6:
   02D1 54 68 69 73 20 69   506 	.ascii "This is sinserif font! ABCDE"
        73 20 73 69 6E 73
        65 72 69 66 20 66
        6F 6E 74 21 20 41
        42 43 44 45
   02ED 00                  507 	.db 0x00
   02EE                     508 __str_7:
   02EE 54 68 69 73 20 69   509 	.ascii "This is chicago font! ABCDE"
        73 20 63 68 69 63
        61 67 6F 20 66 6F
        6E 74 21 20 41 42
        43 44 45
   0309 00                  510 	.db 0x00
                            511 ;test.c:56: void g_translate_coordinates(graphics_t *g, byte *x, byte *y) {
                            512 ;	---------------------------------
                            513 ; Function g_translate_coordinates
                            514 ; ---------------------------------
   030A                     515 _g_translate_coordinates_start::
   030A                     516 _g_translate_coordinates:
   030A DD E5               517 	push	ix
   030C DD 21 00 00         518 	ld	ix,#0
   0310 DD 39               519 	add	ix,sp
   0312 3B                  520 	dec	sp
                            521 ;test.c:60: if (g->coord_sys) { 
   0313 DD 6E 04            522 	ld	l,4 (ix)
   0316 DD 66 05            523 	ld	h,5 (ix)
   0319 01 04 00            524 	ld	bc,#0x0004
   031C 09                  525 	add	hl,bc
   031D 5E                  526 	ld	e,(hl)
   031E 23                  527 	inc	hl
   031F 56                  528 	ld	d,(hl)
   0320 7A                  529 	ld	a,d
   0321 B3                  530 	or	a,e
   0322 28 23               531 	jr	Z,00103$
                            532 ;test.c:61: (*x) += (g->coord_sys->origin_x);
   0324 DD 4E 06            533 	ld	c,6 (ix)
   0327 DD 46 07            534 	ld	b,7 (ix)
   032A C5                  535 	push	bc
   032B FD E1               536 	pop	iy
   032D FD 46 00            537 	ld	b, 0 (iy)
   0330 1A                  538 	ld	a,(de)
   0331 80                  539 	add	a,b
   0332 FD 77 00            540 	ld	0 (iy), a
                            541 ;test.c:62: (*y) += (g->coord_sys->origin_y);
   0335 DD 4E 08            542 	ld	c,8 (ix)
   0338 DD 46 09            543 	ld	b,9 (ix)
   033B 0A                  544 	ld	a,(bc)
   033C DD 77 FF            545 	ld	-1 (ix),a
   033F 13                  546 	inc	de
   0340 1A                  547 	ld	a,(de)
   0341 67                  548 	ld	h,a
   0342 DD 7E FF            549 	ld	a,-1 (ix)
   0345 84                  550 	add	a, h
   0346 02                  551 	ld	(bc),a
   0347                     552 00103$:
   0347 DD F9               553 	ld	sp,ix
   0349 DD E1               554 	pop	ix
   034B C9                  555 	ret
   034C                     556 _g_translate_coordinates_end::
                            557 ;test.c:67: boolean g_clip_margins(graphics_t *g, rect_t *r, margins_t *m, byte *lmask, byte *rmask) __naked {
                            558 ;	---------------------------------
                            559 ; Function g_clip_margins
                            560 ; ---------------------------------
   034C                     561 _g_clip_margins_start::
   034C                     562 _g_clip_margins:
                            563 ;test.c:180: __endasm;
   034C FD 21 00 00         564 	ld	iy,#0x0000
   0350 FD 39               565 	add	iy,sp
   0352 FD 6E 02            566 	ld	l,2(iy)
   0355 FD 66 03            567 	ld	h,3(iy)
   0358 5E                  568 	ld	e,(hl)
   0359 23                  569 	inc	hl
   035A 56                  570 	ld	d,(hl)
   035B FD 6E 04            571 	ld	l,4(iy)
   035E FD 66 05            572 	ld	h,5(iy)
   0361 FD 4E 06            573 	ld	c,6(iy)
   0364 FD 46 07            574 	ld	b,7(iy)
   0367 D9                  575 	exx
   0368 FD 5E 08            576 	ld	e,8(iy)
   036B FD 56 09            577 	ld	d,9(iy)
   036E FD 6E 0A            578 	ld	l,10(iy)
   0371 FD 66 0B            579 	ld	h,11(iy)
   0374 D9                  580 	exx
   0375                     581 	g_clip_margins_raw::
   0375 DD E5               582 	push	ix
   0377 E5                  583 	push	hl
   0378 D5                  584 	push	de
   0379 CDr00s00            585 	call	rct_intersect_raw
   037C FD E1               586 	pop	iy
   037E DD E1               587 	pop	ix
   0380 7D                  588 	ld	a,l
   0381 FE 00               589 	cp	#0
   0383 28 60               590 	jr	z,cm_no_clipping
   0385                     591 	cm_left:
   0385 AF                  592 	xor	a
   0386 02                  593 	ld	(bc),a
   0387 FD 7E 00            594 	ld	a,(iy)
   038A DD 96 00            595 	sub	(ix)
   038D 38 01               596 	jr	c,cm_top
   038F 02                  597 	ld	(bc),a
   0390                     598 	cm_top:
   0390 03                  599 	inc	bc
   0391 AF                  600 	xor	a
   0392 02                  601 	ld	(bc),a
   0393 FD 7E 01            602 	ld	a,1(iy)
   0396 DD 96 01            603 	sub	1(ix)
   0399 38 01               604 	jr	c,cm_right
   039B 02                  605 	ld	(bc),a
   039C                     606 	cm_right:
   039C 03                  607 	inc	bc
   039D AF                  608 	xor	a
   039E 02                  609 	ld	(bc),a
   039F DD 7E 02            610 	ld	a,2(ix)
   03A2 FD 96 02            611 	sub	2(iy)
   03A5 38 01               612 	jr	c,cm_bottom
   03A7 02                  613 	ld	(bc),a
   03A8                     614 	cm_bottom:
   03A8 03                  615 	inc	bc
   03A9 AF                  616 	xor	a
   03AA 02                  617 	ld	(bc),a
   03AB DD 7E 03            618 	ld	a,3(ix)
   03AE FD 96 03            619 	sub	3(iy)
   03B1 38 01               620 	jr	c,cm_masks
   03B3 02                  621 	ld	(bc),a
   03B4                     622 	cm_masks:
   03B4 0B                  623 	dec	bc
   03B5 0A                  624 	ld	a,(bc)
   03B6 D9                  625 	exx
   03B7 36 00               626 	ld	(hl),#0
   03B9 47                  627 	ld	b,a
   03BA DD 7E 02            628 	ld	a,2(ix)
   03BD 90                  629 	sub	b
   03BE E6 07               630 	and	#0x07
   03C0 28 07               631 	jr	z,cm_lmask
   03C2 47                  632 	ld	b,a
   03C3 AF                  633 	xor	a
   03C4                     634 	cm_rmask_loop:
   03C4 37                  635 	scf
   03C5 1F                  636 	rra
   03C6 10 FC               637 	djnz	cm_rmask_loop
   03C8 77                  638 	ld	(hl),a
   03C9                     639 	cm_lmask:
   03C9 EB                  640 	ex	de,hl
   03CA D9                  641 	exx
   03CB 0B                  642 	dec	bc
   03CC 0B                  643 	dec	bc
   03CD 0A                  644 	ld	a,(bc)
   03CE D9                  645 	exx
   03CF 47                  646 	ld	b,a
   03D0 DD 7E 00            647 	ld	a,(ix)
   03D3 80                  648 	add	b
   03D4 E6 07               649 	and	#0x07
   03D6 28 08               650 	jr	z,cm_done_mask
   03D8 47                  651 	ld	b,a
   03D9 AF                  652 	xor	a
   03DA                     653 	cm_lmask_loop:
   03DA 37                  654 	scf
   03DB 1F                  655 	rra
   03DC 10 FC               656 	djnz	cm_lmask_loop
   03DE 2F                  657 	cpl
   03DF 77                  658 	ld	(hl),a
   03E0                     659 	cm_done_mask:
   03E0 D9                  660 	exx
   03E1 2E 01               661 	ld	l,#1
   03E3 18 02               662 	jr	cm_end
   03E5                     663 	cm_no_clipping:
   03E5 2E 00               664 	ld	l,#0
   03E7                     665 	cm_end:
   03E7 DD E1               666 	pop	ix
   03E9 C9                  667 	ret
   03EA                     668 _g_clip_margins_end::
                            669 ;test.c:185: void g_draw_text(graphics_t *g, font_t *font, string text, rect_t *target_rect) {
                            670 ;	---------------------------------
                            671 ; Function g_draw_text
                            672 ; ---------------------------------
   03EA                     673 _g_draw_text_start::
   03EA                     674 _g_draw_text:
   03EA DD E5               675 	push	ix
   03EC DD 21 00 00         676 	ld	ix,#0
   03F0 DD 39               677 	add	ix,sp
   03F2 21 A5 FF            678 	ld	hl,#-91
   03F5 39                  679 	add	hl,sp
   03F6 F9                  680 	ld	sp,hl
                            681 ;test.c:190: byte x = target_rect->x0;
   03F7 DD 5E 0A            682 	ld	e,10 (ix)
   03FA DD 56 0B            683 	ld	d,11 (ix)
   03FD 1A                  684 	ld	a,(de)
   03FE DD 77 FF            685 	ld	-1 (ix),a
                            686 ;test.c:191: byte y = target_rect->y0;
   0401 6B                  687 	ld	l,e
   0402 62                  688 	ld	h,d
   0403 23                  689 	inc	hl
   0404 7E                  690 	ld	a,(hl)
   0405 DD 77 FE            691 	ld	-2 (ix),a
                            692 ;test.c:230: if (!g_clip_margins(g, target_rect, &clip_margins, &lmask, &rmask)) return;
   0408 21 53 00            693 	ld	hl,#0x0053
   040B 39                  694 	add	hl,sp
   040C 4D                  695 	ld	c,l
   040D 44                  696 	ld	b,h
   040E 21 54 00            697 	ld	hl,#0x0054
   0411 39                  698 	add	hl,sp
   0412 DD 75 AD            699 	ld	-83 (ix),l
   0415 DD 74 AE            700 	ld	-82 (ix),h
   0418 FD 21 55 00         701 	ld	iy,#0x0055
   041C FD 39               702 	add	iy,sp
   041E C5                  703 	push	bc
   041F DD 6E AD            704 	ld	l,-83 (ix)
   0422 DD 66 AE            705 	ld	h,-82 (ix)
   0425 E5                  706 	push	hl
   0426 FD E5               707 	push	iy
   0428 D5                  708 	push	de
   0429 DD 6E 04            709 	ld	l,4 (ix)
   042C DD 66 05            710 	ld	h,5 (ix)
   042F E5                  711 	push	hl
   0430 CDr4Cs03            712 	call	_g_clip_margins
   0433 FD 21 0A 00         713 	ld	iy,#0x000A
   0437 FD 39               714 	add	iy,sp
   0439 FD F9               715 	ld	sp,iy
   043B 7D                  716 	ld	a, l
   043C B7                  717 	or	a, a
   043D CAr6Ds05            718 	jp	Z,00106$
                            719 ;test.c:240: &char_size);
   0440 21 4A 00            720 	ld	hl,#0x004A
   0443 39                  721 	add	hl,sp
   0444 EB                  722 	ex	de,hl
                            723 ;test.c:239: &first_char_addr,
   0445 21 4C 00            724 	ld	hl,#0x004C
   0448 39                  725 	add	hl,sp
   0449 DD 75 AD            726 	ld	-83 (ix),l
   044C DD 74 AE            727 	ld	-82 (ix),h
                            728 ;test.c:238: &xmin,
   044F 21 4E 00            729 	ld	hl,#0x004E
   0452 39                  730 	add	hl,sp
   0453 DD 75 AB            731 	ld	-85 (ix),l
   0456 DD 74 AC            732 	ld	-84 (ix),h
                            733 ;test.c:237: &descent,
   0459 21 4F 00            734 	ld	hl,#0x004F
   045C 39                  735 	add	hl,sp
   045D 4D                  736 	ld	c,l
   045E 44                  737 	ld	b,h
                            738 ;test.c:236: &xmax,
   045F 21 50 00            739 	ld	hl,#0x0050
   0462 39                  740 	add	hl,sp
   0463 DD 75 A9            741 	ld	-87 (ix),l
   0466 DD 74 AA            742 	ld	-86 (ix),h
                            743 ;test.c:235: &glyph_lines,
   0469 21 51 00            744 	ld	hl,#0x0051
   046C 39                  745 	add	hl,sp
   046D DD 75 A7            746 	ld	-89 (ix),l
   0470 DD 74 A8            747 	ld	-88 (ix),h
                            748 ;test.c:234: &bytes_per_glyph_line,
   0473 21 52 00            749 	ld	hl,#0x0052
   0476 39                  750 	add	hl,sp
   0477 DD 75 A5            751 	ld	-91 (ix),l
   047A DD 74 A6            752 	ld	-90 (ix),h
                            753 ;test.c:233: font, 
   047D D5                  754 	push	de
   047E DD 6E AD            755 	ld	l,-83 (ix)
   0481 DD 66 AE            756 	ld	h,-82 (ix)
   0484 E5                  757 	push	hl
   0485 DD 6E AB            758 	ld	l,-85 (ix)
   0488 DD 66 AC            759 	ld	h,-84 (ix)
   048B E5                  760 	push	hl
   048C C5                  761 	push	bc
   048D DD 6E A9            762 	ld	l,-87 (ix)
   0490 DD 66 AA            763 	ld	h,-86 (ix)
   0493 E5                  764 	push	hl
   0494 DD 6E A7            765 	ld	l,-89 (ix)
   0497 DD 66 A8            766 	ld	h,-88 (ix)
   049A E5                  767 	push	hl
   049B DD 6E A5            768 	ld	l,-91 (ix)
   049E DD 66 A6            769 	ld	h,-90 (ix)
   04A1 E5                  770 	push	hl
   04A2 DD 6E 06            771 	ld	l,6 (ix)
   04A5 DD 66 07            772 	ld	h,7 (ix)
   04A8 E5                  773 	push	hl
   04A9 CDr00s00            774 	call	_fnt_get_font_info
   04AC 21 10 00            775 	ld	hl,#0x0010
   04AF 39                  776 	add	hl,sp
   04B0 F9                  777 	ld	sp,hl
                            778 ;test.c:242: g_translate_coordinates(g,&x,&y);
   04B1 21 59 00            779 	ld	hl,#0x0059
   04B4 39                  780 	add	hl,sp
   04B5 EB                  781 	ex	de,hl
   04B6 21 5A 00            782 	ld	hl,#0x005A
   04B9 39                  783 	add	hl,sp
   04BA D5                  784 	push	de
   04BB E5                  785 	push	hl
   04BC DD 6E 04            786 	ld	l,4 (ix)
   04BF DD 66 05            787 	ld	h,5 (ix)
   04C2 E5                  788 	push	hl
   04C3 CDr0As03            789 	call	_g_translate_coordinates
   04C6 F1                  790 	pop	af
   04C7 F1                  791 	pop	af
   04C8 F1                  792 	pop	af
                            793 ;test.c:245: while (*text) {
   04C9 DD 4E 06            794 	ld	c,6 (ix)
   04CC DD 46 07            795 	ld	b,7 (ix)
   04CF 03                  796 	inc	bc
   04D0 DD 7E 08            797 	ld	a,8 (ix)
   04D3 DD 77 A5            798 	ld	-91 (ix),a
   04D6 DD 7E 09            799 	ld	a,9 (ix)
   04D9 DD 77 A6            800 	ld	-90 (ix),a
   04DC                     801 00103$:
   04DC DD 6E A5            802 	ld	l,-91 (ix)
   04DF DD 66 A6            803 	ld	h,-90 (ix)
   04E2 7E                  804 	ld	a,(hl)
   04E3 DD 77 A7            805 	ld	-89 (ix), a
   04E6 B7                  806 	or	a, a
   04E7 CAr6Ds05            807 	jp	Z,00106$
                            808 ;test.c:251: delta_ch = ( (*text) - (font->first_ascii) );
   04EA 0A                  809 	ld	a,(bc)
   04EB 57                  810 	ld	d,a
   04EC DD 7E A7            811 	ld	a,-89 (ix)
   04EF 92                  812 	sub	a, d
                            813 ;test.c:253: delta_ch * char_size;
   04F0 5F                  814 	ld	e,a
   04F1 16 00               815 	ld	d,#0x00
   04F3 C5                  816 	push	bc
   04F4 DD 6E EF            817 	ld	l,-17 (ix)
   04F7 DD 66 F0            818 	ld	h,-16 (ix)
   04FA E5                  819 	push	hl
   04FB D5                  820 	push	de
   04FC CDr00s00            821 	call	__mulint_rrx_s
   04FF F1                  822 	pop	af
   0500 F1                  823 	pop	af
   0501 5D                  824 	ld	e,l
   0502 54                  825 	ld	d,h
   0503 C1                  826 	pop	bc
   0504 E5                  827 	push	hl
   0505 DD 6E F1            828 	ld	l,-15 (ix)
   0508 DD 66 F2            829 	ld	h,-14 (ix)
   050B E5                  830 	push	hl
   050C FD E1               831 	pop	iy
   050E E1                  832 	pop	hl
   050F FD 19               833 	add	iy, de
                            834 ;test.c:258: x = x + xmin;
   0511 DD 7E FF            835 	ld	a,-1 (ix)
   0514 DD 86 F3            836 	add	a, -13 (ix)
   0517 DD 77 FF            837 	ld	-1 (ix),a
                            838 ;test.c:260: width = ( ((byte *)char_addr)[char_size-1] );			
   051A FD E5               839 	push	iy
   051C D1                  840 	pop	de
   051D DD 7E EF            841 	ld	a,-17 (ix)
   0520 C6 FF               842 	add	a,#0xFF
   0522 DD 77 A7            843 	ld	-89 (ix),a
   0525 DD 7E F0            844 	ld	a,-16 (ix)
   0528 CE FF               845 	adc	a,#0xFF
   052A DD 77 A8            846 	ld	-88 (ix),a
   052D DD 6E A7            847 	ld	l,-89 (ix)
   0530 DD 66 A8            848 	ld	h,-88 (ix)
   0533 19                  849 	add	hl,de
   0534 5E                  850 	ld	e,(hl)
                            851 ;test.c:261: g_draw_clipped_glyph(g, char_addr,x,y,bytes_per_glyph_line,glyph_lines);		
   0535 C5                  852 	push	bc
   0536 D5                  853 	push	de
   0537 DD 66 F6            854 	ld	h,-10 (ix)
   053A DD 6E F7            855 	ld	l,-9 (ix)
   053D E5                  856 	push	hl
   053E DD 66 FE            857 	ld	h,-2 (ix)
   0541 DD 6E FF            858 	ld	l,-1 (ix)
   0544 E5                  859 	push	hl
   0545 FD E5               860 	push	iy
   0547 DD 6E 04            861 	ld	l,4 (ix)
   054A DD 66 05            862 	ld	h,5 (ix)
   054D E5                  863 	push	hl
   054E CDr72s05            864 	call	_g_draw_clipped_glyph
   0551 F1                  865 	pop	af
   0552 F1                  866 	pop	af
   0553 F1                  867 	pop	af
   0554 F1                  868 	pop	af
   0555 D1                  869 	pop	de
   0556 C1                  870 	pop	bc
                            871 ;test.c:263: x = x + width + xmax;
   0557 DD 7E FF            872 	ld	a,-1 (ix)
   055A 83                  873 	add	a, e
   055B DD 86 F5            874 	add	a, -11 (ix)
   055E DD 77 FF            875 	ld	-1 (ix),a
                            876 ;test.c:265: text++;
   0561 DD 34 A5            877 	inc	-91 (ix)
   0564 C2rDCs04            878 	jp	NZ,00103$
   0567 DD 34 A6            879 	inc	-90 (ix)
   056A C3rDCs04            880 	jp	00103$
   056D                     881 00106$:
   056D DD F9               882 	ld	sp,ix
   056F DD E1               883 	pop	ix
   0571 C9                  884 	ret
   0572                     885 _g_draw_text_end::
                            886 ;test.c:270: void g_draw_clipped_glyph(graphics_t *g, word glyph, byte x, byte y, byte bytes_per_glyph_line, byte glyph_lines) {
                            887 ;	---------------------------------
                            888 ; Function g_draw_clipped_glyph
                            889 ; ---------------------------------
   0572                     890 _g_draw_clipped_glyph_start::
   0572                     891 _g_draw_clipped_glyph:
   0572 DD E5               892 	push	ix
   0574 DD 21 00 00         893 	ld	ix,#0
   0578 DD 39               894 	add	ix,sp
   057A 21 9F FF            895 	ld	hl,#-97
   057D 39                  896 	add	hl,sp
   057E F9                  897 	ld	sp,hl
                            898 ;test.c:289: POPULATE_RECT((&glyph_rect),x,y,x+(bytes_per_glyph_line<<3)-1,y+glyph_lines-1)
   057F 21 56 00            899 	ld	hl,#0x0056
   0582 39                  900 	add	hl,sp
   0583 DD 7E 08            901 	ld	a,8 (ix)
   0586 77                  902 	ld	(hl),a
   0587 21 56 00            903 	ld	hl,#0x0056
   058A 39                  904 	add	hl,sp
   058B 5D                  905 	ld	e,l
   058C 54                  906 	ld	d,h
   058D 23                  907 	inc	hl
   058E DD 7E 09            908 	ld	a,9 (ix)
   0591 77                  909 	ld	(hl),a
   0592 4B                  910 	ld	c,e
   0593 42                  911 	ld	b,d
   0594 03                  912 	inc	bc
   0595 03                  913 	inc	bc
   0596 DD 7E 0A            914 	ld	a,10 (ix)
   0599 07                  915 	rlca
   059A 07                  916 	rlca
   059B 07                  917 	rlca
   059C E6 F8               918 	and	a,#0xF8
   059E 67                  919 	ld	h,a
   059F DD 7E 08            920 	ld	a,8 (ix)
   05A2 84                  921 	add	a, h
   05A3 3D                  922 	dec	a
   05A4 02                  923 	ld	(bc),a
   05A5 4B                  924 	ld	c,e
   05A6 42                  925 	ld	b,d
   05A7 03                  926 	inc	bc
   05A8 03                  927 	inc	bc
   05A9 03                  928 	inc	bc
   05AA DD 7E 09            929 	ld	a,9 (ix)
   05AD DD 86 0B            930 	add	a, 11 (ix)
   05B0 3D                  931 	dec	a
   05B1 02                  932 	ld	(bc),a
                            933 ;test.c:290: if (!g_clip_margins(g, &glyph_rect, &clip_margins, &lmask, &rmask)) return;
   05B2 21 50 00            934 	ld	hl,#0x0050
   05B5 39                  935 	add	hl,sp
   05B6 4D                  936 	ld	c,l
   05B7 44                  937 	ld	b,h
   05B8 21 51 00            938 	ld	hl,#0x0051
   05BB 39                  939 	add	hl,sp
   05BC DD 75 AD            940 	ld	-83 (ix),l
   05BF DD 74 AE            941 	ld	-82 (ix),h
   05C2 21 52 00            942 	ld	hl,#0x0052
   05C5 39                  943 	add	hl,sp
   05C6 DD 75 AB            944 	ld	-85 (ix),l
   05C9 DD 74 AC            945 	ld	-84 (ix),h
   05CC C5                  946 	push	bc
   05CD DD 6E AD            947 	ld	l,-83 (ix)
   05D0 DD 66 AE            948 	ld	h,-82 (ix)
   05D3 E5                  949 	push	hl
   05D4 DD 6E AB            950 	ld	l,-85 (ix)
   05D7 DD 66 AC            951 	ld	h,-84 (ix)
   05DA E5                  952 	push	hl
   05DB D5                  953 	push	de
   05DC DD 6E 04            954 	ld	l,4 (ix)
   05DF DD 66 05            955 	ld	h,5 (ix)
   05E2 E5                  956 	push	hl
   05E3 CDr4Cs03            957 	call	_g_clip_margins
   05E6 FD 21 0A 00         958 	ld	iy,#0x000A
   05EA FD 39               959 	add	iy,sp
   05EC FD F9               960 	ld	sp,iy
   05EE 7D                  961 	ld	a, l
   05EF B7                  962 	or	a, a
   05F0 CAr1Bs08            963 	jp	Z,00122$
                            964 ;test.c:292: shift_bits = x & 0x07;
   05F3 DD 7E 08            965 	ld	a,8 (ix)
   05F6 E6 07               966 	and	a, #0x07
   05F8 DD 77 F9            967 	ld	-7 (ix),a
                            968 ;test.c:297: mem_copy(mask,glyph,bytes_per_glyph_line);
   05FB DD 4E 0A            969 	ld	c,10 (ix)
   05FE 06 00               970 	ld	b,#0x00
   0600 DD 5E 06            971 	ld	e,6 (ix)
   0603 DD 56 07            972 	ld	d,7 (ix)
   0606 21 30 00            973 	ld	hl,#0x0030
   0609 39                  974 	add	hl,sp
   060A DD 75 AB            975 	ld	-85 (ix),l
   060D DD 74 AC            976 	ld	-84 (ix),h
   0610 E5                  977 	push	hl
   0611 DD 6E AB            978 	ld	l,-85 (ix)
   0614 DD 66 AC            979 	ld	h,-84 (ix)
   0617 E5                  980 	push	hl
   0618 FD E1               981 	pop	iy
   061A E1                  982 	pop	hl
   061B C5                  983 	push	bc
   061C D5                  984 	push	de
   061D FD E5               985 	push	iy
   061F CDrE1s08            986 	call	_mem_copy
   0622 F1                  987 	pop	af
   0623 F1                  988 	pop	af
   0624 F1                  989 	pop	af
                            990 ;test.c:298: mask[bytes_per_glyph_line]=0;
   0625 DD 7E AB            991 	ld	a,-85 (ix)
   0628 DD 86 0A            992 	add	a, 10 (ix)
   062B 5F                  993 	ld	e,a
   062C DD 7E AC            994 	ld	a,-84 (ix)
   062F CE 00               995 	adc	a, #0x00
   0631 57                  996 	ld	d,a
   0632 3E 00               997 	ld	a,#0x00
   0634 12                  998 	ld	(de),a
                            999 ;test.c:299: glyph += bytes_per_glyph_line; /* skip over mask */		
   0635 DD 7E 0A           1000 	ld	a,10 (ix)
   0638 DD 77 AD           1001 	ld	-83 (ix), a
   063B DD 77 A9           1002 	ld	-87 (ix),a
   063E DD 36 AA 00        1003 	ld	-86 (ix),#0x00
   0642 DD 7E 06           1004 	ld	a,6 (ix)
   0645 DD 86 A9           1005 	add	a, -87 (ix)
   0648 DD 77 06           1006 	ld	6 (ix),a
   064B DD 7E 07           1007 	ld	a,7 (ix)
   064E DD 8E AA           1008 	adc	a, -86 (ix)
   0651 DD 77 07           1009 	ld	7 (ix),a
                           1010 ;test.c:300: if (shift_bits)
   0654 DD 7E F9           1011 	ld	a,-7 (ix)
   0657 B7                 1012 	or	a, a
   0658 28 1C              1013 	jr	Z,00104$
                           1014 ;test.c:301: shift_buffer_right((word)mask, bytes_per_glyph_line + 1, shift_bits, 0x80);	
   065A DD 46 AD           1015 	ld	b,-83 (ix)
   065D 04                 1016 	inc	b
   065E DD 5E AB           1017 	ld	e,-85 (ix)
   0661 DD 56 AC           1018 	ld	d,-84 (ix)
   0664 3E 80              1019 	ld	a,#0x80
   0666 F5                 1020 	push	af
   0667 33                 1021 	inc	sp
   0668 DD 7E F9           1022 	ld	a,-7 (ix)
   066B F5                 1023 	push	af
   066C 33                 1024 	inc	sp
   066D C5                 1025 	push	bc
   066E 33                 1026 	inc	sp
   066F D5                 1027 	push	de
   0670 CDr78s09           1028 	call	_shift_buffer_right
   0673 F1                 1029 	pop	af
   0674 F1                 1030 	pop	af
   0675 33                 1031 	inc	sp
   0676                    1032 00104$:
                           1033 ;test.c:305: glyph += (bytes_per_glyph_line * clip_margins.top);
   0676 21 53 00           1034 	ld	hl,#0x0052+1
   0679 39                 1035 	add	hl,sp
   067A 4E                 1036 	ld	c,(hl)
   067B 59                 1037 	ld	e,c
   067C DD 66 AD           1038 	ld	h,-83 (ix)
   067F 2E 00              1039 	ld	l,#0x00
   0681 55                 1040 	ld	d,l
   0682 06 08              1041 	ld	b,#0x08
   0684                    1042 00137$:
   0684 29                 1043 	add	hl,hl
   0685 30 01              1044 	jr	NC,00138$
   0687 19                 1045 	add	hl,de
   0688                    1046 00138$:
   0688 10 FA              1047 	djnz	00137$
   068A 55                 1048 	ld	d,l
   068B 5C                 1049 	ld	e,h
   068C DD 7E 06           1050 	ld	a,6 (ix)
   068F 82                 1051 	add	a, d
   0690 DD 77 06           1052 	ld	6 (ix),a
   0693 DD 7E 07           1053 	ld	a,7 (ix)
   0696 8B                 1054 	adc	a, e
   0697 DD 77 07           1055 	ld	7 (ix),a
                           1056 ;test.c:306: line = clip_margins.top;
   069A 51                 1057 	ld	d,c
                           1058 ;test.c:307: y += clip_margins.top;
   069B DD 7E 09           1059 	ld	a,9 (ix)
   069E 81                 1060 	add	a, c
                           1061 ;test.c:308: dest_addr = directg_vmem_addr(x,y);
   069F DD 77 09           1062 	ld	9 (ix), a
   06A2 D5                 1063 	push	de
   06A3 F5                 1064 	push	af
   06A4 33                 1065 	inc	sp
   06A5 DD 7E 08           1066 	ld	a,8 (ix)
   06A8 F5                 1067 	push	af
   06A9 33                 1068 	inc	sp
   06AA CDr31s09           1069 	call	_directg_vmem_addr
   06AD F1                 1070 	pop	af
   06AE D1                 1071 	pop	de
   06AF DD 75 FE           1072 	ld	-2 (ix),l
   06B2 DD 74 FF           1073 	ld	-1 (ix),h
                           1074 ;test.c:309: glyph_lines-=clip_margins.bottom;
   06B5 21 52 00           1075 	ld	hl,#0x0052
   06B8 39                 1076 	add	hl,sp
   06B9 4D                 1077 	ld	c,l
   06BA 44                 1078 	ld	b,h
   06BB 23                 1079 	inc	hl
   06BC 23                 1080 	inc	hl
   06BD 23                 1081 	inc	hl
   06BE DD 7E 0B           1082 	ld	a,11 (ix)
   06C1 96                 1083 	sub	a,(hl)
   06C2 DD 77 0B           1084 	ld	11 (ix),a
                           1085 ;test.c:314: b_beg = (clip_margins.left>>3);
   06C5 0A                 1086 	ld	a,(bc)
   06C6 CB 3F              1087 	srl	a
   06C8 CB 3F              1088 	srl	a
   06CA CB 3F              1089 	srl	a
   06CC DD 77 FB           1090 	ld	-5 (ix),a
                           1091 ;test.c:315: b_end = bytes_per_glyph_line - (clip_margins.right>>3) + 1;
   06CF 03                 1092 	inc	bc
   06D0 03                 1093 	inc	bc
   06D1 0A                 1094 	ld	a,(bc)
   06D2 5F                 1095 	ld	e,a
   06D3 CB 3B              1096 	srl	e
   06D5 CB 3B              1097 	srl	e
   06D7 CB 3B              1098 	srl	e
   06D9 DD 7E AD           1099 	ld	a,-83 (ix)
   06DC 93                 1100 	sub	a, e
   06DD 3C                 1101 	inc	a
   06DE DD 77 FA           1102 	ld	-6 (ix),a
                           1103 ;test.c:317: while (line < glyph_lines) {
   06E1 DD 7E AD           1104 	ld	a,-83 (ix)
   06E4 3C                 1105 	inc	a
   06E5 DD 77 A8           1106 	ld	-88 (ix),a
   06E8 21 10 00           1107 	ld	hl,#0x0010
   06EB 39                 1108 	add	hl,sp
   06EC DD 75 A6           1109 	ld	-90 (ix),l
   06EF DD 74 A7           1110 	ld	-89 (ix),h
   06F2 21 52 00           1111 	ld	hl,#0x0052
   06F5 39                 1112 	add	hl,sp
   06F6 DD 75 A4           1113 	ld	-92 (ix),l
   06F9 DD 74 A5           1114 	ld	-91 (ix),h
   06FC 21 52 00           1115 	ld	hl,#0x0052
   06FF 39                 1116 	add	hl,sp
   0700 7D                 1117 	ld	a,l
   0701 C6 02              1118 	add	a, #0x02
   0703 DD 77 A2           1119 	ld	-94 (ix),a
   0706 7C                 1120 	ld	a,h
   0707 CE 00              1121 	adc	a, #0x00
   0709 DD 77 A3           1122 	ld	-93 (ix),a
   070C DD 72 A1           1123 	ld	-95 (ix),d
   070F                    1124 00115$:
   070F DD 7E A1           1125 	ld	a,-95 (ix)
   0712 DD 96 0B           1126 	sub	a, 11 (ix)
   0715 D2r1Bs08           1127 	jp	NC,00122$
                           1128 ;test.c:318: mem_copy(pattern,glyph,bytes_per_glyph_line);
   0718 DD 5E 06           1129 	ld	e,6 (ix)
   071B DD 56 07           1130 	ld	d,7 (ix)
   071E DD 4E A6           1131 	ld	c,-90 (ix)
   0721 DD 46 A7           1132 	ld	b,-89 (ix)
   0724 DD 6E A9           1133 	ld	l,-87 (ix)
   0727 DD 66 AA           1134 	ld	h,-86 (ix)
   072A E5                 1135 	push	hl
   072B D5                 1136 	push	de
   072C C5                 1137 	push	bc
   072D CDrE1s08           1138 	call	_mem_copy
   0730 F1                 1139 	pop	af
   0731 F1                 1140 	pop	af
   0732 F1                 1141 	pop	af
                           1142 ;test.c:319: pattern[bytes_per_glyph_line]=0;
   0733 DD 7E A6           1143 	ld	a,-90 (ix)
   0736 DD 86 AD           1144 	add	a, -83 (ix)
   0739 6F                 1145 	ld	l,a
   073A DD 7E A7           1146 	ld	a,-89 (ix)
   073D CE 00              1147 	adc	a, #0x00
   073F 67                 1148 	ld	h,a
   0740 36 00              1149 	ld	(hl),#0x00
                           1150 ;test.c:320: glyph += bytes_per_glyph_line;
   0742 DD 7E 06           1151 	ld	a,6 (ix)
   0745 DD 86 A9           1152 	add	a, -87 (ix)
   0748 DD 77 06           1153 	ld	6 (ix),a
   074B DD 7E 07           1154 	ld	a,7 (ix)
   074E DD 8E AA           1155 	adc	a, -86 (ix)
   0751 DD 77 07           1156 	ld	7 (ix),a
                           1157 ;test.c:321: if (shift_bits)
   0754 DD 7E F9           1158 	ld	a,-7 (ix)
   0757 B7                 1159 	or	a, a
   0758 28 24              1160 	jr	Z,00106$
                           1161 ;test.c:322: shift_buffer_right((word)pattern, bytes_per_glyph_line + 1, shift_bits, 0x00);
   075A DD 7E A6           1162 	ld	a,-90 (ix)
   075D DD 77 9F           1163 	ld	-97 (ix),a
   0760 DD 7E A7           1164 	ld	a,-89 (ix)
   0763 DD 77 A0           1165 	ld	-96 (ix),a
   0766 3E 00              1166 	ld	a,#0x00
   0768 F5                 1167 	push	af
   0769 33                 1168 	inc	sp
   076A DD 66 F9           1169 	ld	h,-7 (ix)
   076D DD 6E A8           1170 	ld	l,-88 (ix)
   0770 E5                 1171 	push	hl
   0771 DD 6E 9F           1172 	ld	l,-97 (ix)
   0774 DD 66 A0           1173 	ld	h,-96 (ix)
   0777 E5                 1174 	push	hl
   0778 CDr78s09           1175 	call	_shift_buffer_right
   077B F1                 1176 	pop	af
   077C F1                 1177 	pop	af
   077D 33                 1178 	inc	sp
   077E                    1179 00106$:
                           1180 ;test.c:324: v=(byte *)dest_addr;
   077E DD 7E FE           1181 	ld	a,-2 (ix)
   0781 DD 77 FC           1182 	ld	-4 (ix),a
   0784 DD 7E FF           1183 	ld	a,-1 (ix)
   0787 DD 77 FD           1184 	ld	-3 (ix),a
                           1185 ;test.c:325: for (b=b_beg; b < b_end; b++)
   078A DD 5E FB           1186 	ld	e,-5 (ix)
   078D                    1187 00118$:
   078D 7B                 1188 	ld	a,e
   078E DD 96 FA           1189 	sub	a, -6 (ix)
   0791 30 71              1190 	jr	NC,00121$
                           1191 ;test.c:326: if (clip_margins.left && b==b_beg)
   0793 DD 6E A4           1192 	ld	l,-92 (ix)
   0796 DD 66 A5           1193 	ld	h,-91 (ix)
   0799 7E                 1194 	ld	a,(hl)
   079A B7                 1195 	or	a, a
   079B 28 19              1196 	jr	Z,00112$
   079D 7B                 1197 	ld	a,e
   079E DD 96 FB           1198 	sub	a, -5 (ix)
   07A1 20 13              1199 	jr	NZ,00112$
                           1200 ;test.c:327: v[b] = ~lmask; // v[b] & ~lmask | pattern[b] & lmask; 
   07A3 DD 7E FC           1201 	ld	a,-4 (ix)
   07A6 83                 1202 	add	a, e
   07A7 4F                 1203 	ld	c,a
   07A8 DD 7E FD           1204 	ld	a,-3 (ix)
   07AB CE 00              1205 	adc	a, #0x00
   07AD 47                 1206 	ld	b,a
   07AE DD 7E F0           1207 	ld	a,-16 (ix)
   07B1 2F                 1208 	cpl
   07B2 57                 1209 	ld	d,a
   07B3 02                 1210 	ld	(bc),a
   07B4 18 4A              1211 	jr	00120$
   07B6                    1212 00112$:
                           1213 ;test.c:328: else if (clip_margins.right && b==b_end)
   07B6 DD 6E A2           1214 	ld	l,-94 (ix)
   07B9 DD 66 A3           1215 	ld	h,-93 (ix)
   07BC 7E                 1216 	ld	a,(hl)
   07BD B7                 1217 	or	a, a
   07BE 28 15              1218 	jr	Z,00108$
   07C0 7B                 1219 	ld	a,e
   07C1 DD 96 FA           1220 	sub	a, -6 (ix)
   07C4 20 0F              1221 	jr	NZ,00108$
                           1222 ;test.c:329: v[b] = rmask;
   07C6 DD 6E FC           1223 	ld	l,-4 (ix)
   07C9 DD 66 FD           1224 	ld	h,-3 (ix)
   07CC 16 00              1225 	ld	d,#0x00
   07CE 19                 1226 	add	hl, de
   07CF DD 7E EF           1227 	ld	a,-17 (ix)
   07D2 77                 1228 	ld	(hl),a
   07D3 18 2B              1229 	jr	00120$
   07D5                    1230 00108$:
                           1231 ;test.c:331: v[b] = v[b] & mask[b] | pattern[b];			
   07D5 DD 7E FC           1232 	ld	a,-4 (ix)
   07D8 83                 1233 	add	a, e
   07D9 4F                 1234 	ld	c,a
   07DA DD 7E FD           1235 	ld	a,-3 (ix)
   07DD CE 00              1236 	adc	a, #0x00
   07DF 47                 1237 	ld	b,a
   07E0 0A                 1238 	ld	a,(bc)
   07E1 DD 77 9F           1239 	ld	-97 (ix),a
   07E4 DD 6E AB           1240 	ld	l,-85 (ix)
   07E7 DD 66 AC           1241 	ld	h,-84 (ix)
   07EA 16 00              1242 	ld	d,#0x00
   07EC 19                 1243 	add	hl, de
   07ED 7E                 1244 	ld	a,(hl)
   07EE DD A6 9F           1245 	and	a, -97 (ix)
   07F1 57                 1246 	ld	d,a
   07F2 DD 7E A6           1247 	ld	a,-90 (ix)
   07F5 83                 1248 	add	a, e
   07F6 6F                 1249 	ld	l,a
   07F7 DD 7E A7           1250 	ld	a,-89 (ix)
   07FA CE 00              1251 	adc	a, #0x00
   07FC 67                 1252 	ld	h,a
   07FD 7E                 1253 	ld	a,(hl)
   07FE B2                 1254 	or	a, d
   07FF 02                 1255 	ld	(bc),a
   0800                    1256 00120$:
                           1257 ;test.c:325: for (b=b_beg; b < b_end; b++)
   0800 1C                 1258 	inc	e
   0801 C3r8Ds07           1259 	jp	00118$
   0804                    1260 00121$:
                           1261 ;test.c:333: dest_addr=directg_vmem_nextrow_addr(dest_addr);
   0804 DD 6E FE           1262 	ld	l,-2 (ix)
   0807 DD 66 FF           1263 	ld	h,-1 (ix)
   080A E5                 1264 	push	hl
   080B CDr5Bs09           1265 	call	_directg_vmem_nextrow_addr
   080E F1                 1266 	pop	af
   080F DD 75 FE           1267 	ld	-2 (ix),l
   0812 DD 74 FF           1268 	ld	-1 (ix),h
                           1269 ;test.c:334: line++;
   0815 DD 34 A1           1270 	inc	-95 (ix)
   0818 C3r0Fs07           1271 	jp	00115$
   081B                    1272 00122$:
   081B DD F9              1273 	ld	sp,ix
   081D DD E1              1274 	pop	ix
   081F C9                 1275 	ret
   0820                    1276 _g_draw_clipped_glyph_end::
                           1277 ;test.c:338: void g_init() {
                           1278 ;	---------------------------------
                           1279 ; Function g_init
                           1280 ; ---------------------------------
   0820                    1281 _g_init_start::
   0820                    1282 _g_init:
                           1283 ;test.c:346: shadow_screen=(byte *)50000;
   0820 FD 21r02s00        1284 	ld	iy,#_shadow_screen
   0824 FD 36 00 50        1285 	ld	0 (iy),#0x50
   0828 FD 36 01 C3        1286 	ld	1 (iy),#0xC3
                           1287 ;test.c:347: screen=(byte *)VIDEO_MEM_ADDR;
   082C FD 21r00s00        1288 	ld	iy,#_screen
   0830 FD 36 00 00        1289 	ld	0 (iy),#0x00
   0834 FD 36 01 40        1290 	ld	1 (iy),#0x40
                           1291 ;test.c:348: delta_g = shadow_screen - screen;
   0838 FD 21r08s00        1292 	ld	iy,#_delta_g
   083C FD 36 00 50        1293 	ld	0 (iy),#0x50
   0840 FD 36 01 83        1294 	ld	1 (iy),#0x83
                           1295 ;test.c:353: POPULATE_RECT((&screen_rect), 0, 0, MAX_X, MAX_Y)
   0844 21r04s00           1296 	ld	hl,#_screen_rect
   0847 36 00              1297 	ld	(hl),#0x00
   0849 21r05s00           1298 	ld	hl,#_screen_rect + 1
   084C 36 00              1299 	ld	(hl),#0x00
   084E 21r06s00           1300 	ld	hl,#_screen_rect + 2
   0851 36 FF              1301 	ld	(hl),#0xFF
   0853 21r07s00           1302 	ld	hl,#_screen_rect + 3
   0856 36 BF              1303 	ld	(hl),#0xBF
                           1304 ;test.c:357: mem_set(mstart, 0, VIDEO_MEM_SIZE);
   0858 21 00 18           1305 	ld	hl,#0x1800
   085B E5                 1306 	push	hl
   085C 3E 00              1307 	ld	a,#0x00
   085E F5                 1308 	push	af
   085F 33                 1309 	inc	sp
   0860 26 40              1310 	ld	h, #0x40
   0862 E5                 1311 	push	hl
   0863 CDr14s09           1312 	call	_mem_set
   0866 F1                 1313 	pop	af
   0867 F1                 1314 	pop	af
   0868 33                 1315 	inc	sp
                           1316 ;test.c:359: mem_set(mstart, 0b00111000, ATTR_MEM_SIZE);
   0869 21 00 03           1317 	ld	hl,#0x0300
   086C E5                 1318 	push	hl
   086D 3E 38              1319 	ld	a,#0x38
   086F F5                 1320 	push	af
   0870 33                 1321 	inc	sp
   0871 26 58              1322 	ld	h, #0x58
   0873 E5                 1323 	push	hl
   0874 CDr14s09           1324 	call	_mem_set
   0877 F1                 1325 	pop	af
                           1326 ;test.c:361: mem_copy(shadow_screen, screen, VIDEO_MEM_SIZE + ATTR_MEM_SIZE);
   0878 33                 1327 	inc	sp
   0879 21 00 1B           1328 	ld	hl,#0x1B00
   087C E3                 1329 	ex	(sp),hl
   087D 2Ar00s00           1330 	ld	hl,(_screen)
   0880 E5                 1331 	push	hl
   0881 2Ar02s00           1332 	ld	hl,(_shadow_screen)
   0884 E5                 1333 	push	hl
   0885 CDrE1s08           1334 	call	_mem_copy
   0888 F1                 1335 	pop	af
   0889 F1                 1336 	pop	af
   088A F1                 1337 	pop	af
                           1338 ;test.c:369: __endasm;
   088B 3E 07              1339 	ld	a,#0b00000111
   088D D3 FE              1340 	out	(#0xfe),a
   088F C9                 1341 	ret
   0890                    1342 _g_init_end::
                           1343 ;test.c:372: void directg_realize(rect_t *r) __naked {
                           1344 ;	---------------------------------
                           1345 ; Function directg_realize
                           1346 ; ---------------------------------
   0890                    1347 _directg_realize_start::
   0890                    1348 _directg_realize:
                           1349 ;test.c:462: __endasm;
   0890 FD 21 00 00        1350 	ld	iy,#0x0000
   0894 FD 39              1351 	add	iy,sp
   0896 FD 6E 02           1352 	ld	l,2(iy)
   0899 FD 66 03           1353 	ld	h,3(iy)
   089C 5E                 1354 	ld	e,(hl)
   089D 23                 1355 	inc	hl
   089E 4E                 1356 	ld	c,(hl)
   089F 23                 1357 	inc	hl
   08A0 56                 1358 	ld	d,(hl)
   08A1 23                 1359 	inc	hl
   08A2 46                 1360 	ld	b,(hl)
   08A3 D9                 1361 	exx
   08A4 3Ar08s00           1362 	ld	a,(#_delta_g+0)
   08A7 5F                 1363 	ld	e,a
   08A8 3Ar09s00           1364 	ld	a,(#_delta_g+1)
   08AB 57                 1365 	ld	d,a
   08AC D9                 1366 	exx
   08AD C5                 1367 	push	bc
   08AE D5                 1368 	push	de
   08AF CDr3Ds09           1369 	call	directg_vmem_addr_raw
   08B2 D1                 1370 	pop	de
   08B3 C1                 1371 	pop	bc
   08B4 CB 3A              1372 	srl	d
   08B6 CB 3A              1373 	srl	d
   08B8 CB 3A              1374 	srl	d
   08BA CB 3B              1375 	srl	e
   08BC CB 3B              1376 	srl	e
   08BE CB 3B              1377 	srl	e
   08C0 78                 1378 	ld	a,b
   08C1 91                 1379 	sub	c
   08C2 3C                 1380 	inc	a
   08C3 47                 1381 	ld	b,a
   08C4 7A                 1382 	ld	a,d
   08C5 93                 1383 	sub	e
   08C6 3C                 1384 	inc	a
   08C7 D9                 1385 	exx
   08C8 D5                 1386 	push	de
   08C9 D9                 1387 	exx
   08CA D1                 1388 	pop	de
   08CB                    1389 	real_y_loop:
   08CB F5                 1390 	push	af
   08CC C5                 1391 	push	bc
   08CD D5                 1392 	push	de
   08CE E5                 1393 	push	hl
   08CF 06 00              1394 	ld	b,#0
   08D1 4F                 1395 	ld	c,a
   08D2 E5                 1396 	push	hl
   08D3 19                 1397 	add	hl,de
   08D4 D1                 1398 	pop	de
   08D5 ED B0              1399 	ldir
   08D7 E1                 1400 	pop	hl
   08D8 CDr67s09           1401 	call	directg_vmem_nextrow_addr_raw
   08DB D1                 1402 	pop	de
   08DC C1                 1403 	pop	bc
   08DD F1                 1404 	pop	af
   08DE 10 EB              1405 	djnz	real_y_loop
   08E0 C9                 1406 	ret
   08E1                    1407 _directg_realize_end::
                           1408 ;test.c:465: void mem_copy(byte *dest, byte *src, word count) __naked {
                           1409 ;	---------------------------------
                           1410 ; Function mem_copy
                           1411 ; ---------------------------------
   08E1                    1412 _mem_copy_start::
   08E1                    1413 _mem_copy:
                           1414 ;test.c:483: __endasm;
   08E1 FD 21 00 00        1415 	ld	iy,#0x0000
   08E5 FD 39              1416 	add	iy,sp
   08E7 FD 5E 02           1417 	ld	e,2(iy)
   08EA FD 56 03           1418 	ld	d,3(iy)
   08ED FD 6E 04           1419 	ld	l,4(iy)
   08F0 FD 66 05           1420 	ld	h,5(iy)
   08F3 FD 4E 06           1421 	ld	c,6(iy)
   08F6 FD 46 07           1422 	ld	b,7(iy)
   08F9 ED B0              1423 	ldir
   08FB C9                 1424 	ret
   08FC                    1425 _mem_copy_end::
                           1426 ;test.c:486: word string_length(string s) __naked {
                           1427 ;	---------------------------------
                           1428 ; Function string_length
                           1429 ; ---------------------------------
   08FC                    1430 _string_length_start::
   08FC                    1431 _string_length:
                           1432 ;test.c:503: __endasm;
   08FC FD 21 00 00        1433 	ld	iy,#0x0000
   0900 FD 39              1434 	add	iy,sp
   0902 11 00 00           1435 	ld	de,#0x0000
   0905 FD 6E 02           1436 	ld	l,2(iy)
   0908 FD 66 03           1437 	ld	h,3(iy)
   090B                    1438 	sl_loop:
   090B BE                 1439 	cp	(hl)
   090C 28 04              1440 	jr	z,sl_end
   090E 13                 1441 	inc	de
   090F 23                 1442 	inc	hl
   0910 18 F9              1443 	jr	sl_loop
   0912                    1444 	sl_end:
   0912 EB                 1445 	ex	de,hl
   0913 C9                 1446 	ret
   0914                    1447 _string_length_end::
                           1448 ;test.c:511: void mem_set(byte *dest, byte val, word count) __naked {
                           1449 ;	---------------------------------
                           1450 ; Function mem_set
                           1451 ; ---------------------------------
   0914                    1452 _mem_set_start::
   0914                    1453 _mem_set:
                           1454 ;test.c:540: __endasm;
   0914 FD 21 00 00        1455 	ld	iy,#0x0000
   0918 FD 39              1456 	add	iy,sp
   091A FD 6E 02           1457 	ld	l,2(iy)
   091D FD 66 03           1458 	ld	h,3(iy)
   0920 FD 7E 04           1459 	ld	a,4(iy)
   0923 FD 4E 05           1460 	ld	c,5(iy)
   0926 FD 46 06           1461 	ld	b,6(iy)
   0929                    1462 	mem_set_raw::
   0929 0B                 1463 	dec	bc
   092A E5                 1464 	push	hl
   092B D1                 1465 	pop	de
   092C 13                 1466 	inc	de
   092D 77                 1467 	ld	(hl),a
   092E ED B0              1468 	ldir
   0930 C9                 1469 	ret
   0931                    1470 _mem_set_end::
                           1471 ;test.c:543: word directg_vmem_addr(byte x, byte y) __naked {
                           1472 ;	---------------------------------
                           1473 ; Function directg_vmem_addr
                           1474 ; ---------------------------------
   0931                    1475 _directg_vmem_addr_start::
   0931                    1476 _directg_vmem_addr:
                           1477 ;test.c:593: __endasm;
                           1478 ;;	get function parameters from stack
   0931 FD 21 00 00        1479 	ld	iy,#0x0000
   0935 FD 39              1480 	add	iy,sp
   0937 FD 5E 02           1481 	ld	e,2(iy)
   093A FD 4E 03           1482 	ld	c,3(iy)
   093D                    1483 	directg_vmem_addr_raw::
                           1484 ;;	calculate row memory address
   093D 79                 1485 	ld	a,c
   093E E6 07              1486 	and	#0x07
   0940 67                 1487 	ld	h,a
   0941 79                 1488 	ld	a,c
   0942 E6 38              1489 	and	#0x38
   0944 17                 1490 	rla
   0945 17                 1491 	rla
   0946 6F                 1492 	ld	l,a
   0947 79                 1493 	ld	a,c
   0948 E6 C0              1494 	and	#0xc0
   094A 1F                 1495 	rra
   094B 1F                 1496 	rra
   094C 1F                 1497 	rra
   094D B4                 1498 	or	h
   094E F6 40              1499 	or	#0x40
   0950 67                 1500 	ld	h,a
   0951 16 00              1501 	ld	d,#0
   0953 CB 3B              1502 	srl	e
   0955 CB 3B              1503 	srl	e
   0957 CB 3B              1504 	srl	e
   0959 19                 1505 	add	hl,de
   095A C9                 1506 	ret
   095B                    1507 _directg_vmem_addr_end::
                           1508 ;test.c:597: word directg_vmem_nextrow_addr(word addr) __naked {
                           1509 ;	---------------------------------
                           1510 ; Function directg_vmem_nextrow_addr
                           1511 ; ---------------------------------
   095B                    1512 _directg_vmem_nextrow_addr_start::
   095B                    1513 _directg_vmem_nextrow_addr:
                           1514 ;test.c:631: __endasm;
   095B FD 21 00 00        1515 	ld	iy,#0x0000
   095F FD 39              1516 	add	iy,sp
   0961 FD 6E 02           1517 	ld	l,2(iy)
   0964 FD 66 03           1518 	ld	h,3(iy)
   0967                    1519 	directg_vmem_nextrow_addr_raw::
   0967 24                 1520 	inc	h
   0968 7C                 1521 	ld	a,h
   0969 E6 07              1522 	and	#7
   096B 20 0A              1523 	jr	nz,nextrow_done
   096D 7D                 1524 	ld	a,l
   096E C6 20              1525 	add	a,#32
   0970 6F                 1526 	ld	l,a
   0971 38 04              1527 	jr	c, nextrow_done
   0973 7C                 1528 	ld	a,h
   0974 D6 08              1529 	sub	#8
   0976 67                 1530 	ld	h,a
   0977                    1531 	nextrow_done:
   0977 C9                 1532 	ret
   0978                    1533 _directg_vmem_nextrow_addr_end::
                           1534 ;test.c:637: void shift_buffer_right(word start_addr, byte len, byte bits, byte lmask) __naked {
                           1535 ;	---------------------------------
                           1536 ; Function shift_buffer_right
                           1537 ; ---------------------------------
   0978                    1538 _shift_buffer_right_start::
   0978                    1539 _shift_buffer_right:
                           1540 ;test.c:678: __endasm;
   0978 FD 21 00 00        1541 	ld	iy,#0x0000
   097C FD 39              1542 	add	iy,sp
   097E FD 6E 02           1543 	ld	l,2(iy)
   0981 FD 66 03           1544 	ld	h,3(iy)
   0984 FD 4E 04           1545 	ld	c,4(iy)
   0987 1E 00              1546 	ld	e,#0x00
   0989 FD 7E 06           1547 	ld	a,6(iy)
   098C B7                 1548 	or	a
   098D 28 0B              1549 	jr	z,no_mask
   098F 1E 80              1550 	ld	e,#0x80
   0991 FD 46 05           1551 	ld	b,5(iy)
   0994                    1552 	mask_loop:
   0994 CB 2B              1553 	sra	e
   0996 10 FC              1554 	djnz	mask_loop
   0998 CB 23              1555 	sla	e
   099A                    1556 	no_mask:
   099A 16 00              1557 	ld	d,#0
   099C                    1558 	len_loop:
   099C 7A                 1559 	ld	a,d
   099D 16 00              1560 	ld	d,#0
   099F FD 46 05           1561 	ld	b,5(iy)
   09A2                    1562 	shift_loop:
   09A2 CB 1E              1563 	rr	(hl)
   09A4 CB 1A              1564 	rr	d
   09A6 10 FA              1565 	djnz	shift_loop
   09A8 B6                 1566 	or	(hl)
   09A9 77                 1567 	ld	(hl),a
   09AA 23                 1568 	inc	hl
   09AB 0D                 1569 	dec	c
   09AC 20 EE              1570 	jr	nz,len_loop
   09AE FD 6E 02           1571 	ld	l,2(iy)
   09B1 FD 66 03           1572 	ld	h,3(iy)
   09B4 7B                 1573 	ld	a,e
   09B5 B6                 1574 	or	(hl)
   09B6 77                 1575 	ld	(hl),a
   09B7 C9                 1576 	ret
   09B8                    1577 _shift_buffer_right_end::
                           1578 ;test.c:681: void directg_aligned_glyph_16x16(byte x, byte y, byte *glyph, byte op) __naked {
                           1579 ;	---------------------------------
                           1580 ; Function directg_aligned_glyph_16x16
                           1581 ; ---------------------------------
   09B8                    1582 _directg_aligned_glyph_16x16_start::
   09B8                    1583 _directg_aligned_glyph_16x16:
                           1584 ;test.c:757: __endasm;
   09B8 FD 21 00 00        1585 	ld	iy,#0x0000
   09BC FD 39              1586 	add	iy,sp
   09BE FD 7E 03           1587 	ld	a,3(iy)
   09C1 FE BF              1588 	cp	#191
   09C3 30 59              1589 	jr	nc,pag_done
   09C5 4F                 1590 	ld	c,a
   09C6 C6 10              1591 	add	#16
   09C8 47                 1592 	ld	b,a
   09C9 FE BF              1593 	cp	#191
   09CB 38 02              1594 	jr	c,bottom_ok
   09CD 06 C0              1595 	ld	b,#191 + 1
   09CF                    1596 	bottom_ok:
   09CF 78                 1597 	ld	a,b
   09D0 91                 1598 	sub	c
   09D1 47                 1599 	ld	b,a
   09D2 FD 5E 04           1600 	ld	e,4(iy)
   09D5 FD 56 05           1601 	ld	d,5(iy)
   09D8 D5                 1602 	push	de
   09D9 FD 5E 02           1603 	ld	e,2(iy)
   09DC CDr3Ds09           1604 	call	directg_vmem_addr_raw
   09DF D1                 1605 	pop	de
   09E0                    1606 	pag_loop:
   09E0 C5                 1607 	push	bc
   09E1 FD 7E 06           1608 	ld	a,6(iy)
   09E4 E6 02              1609 	and	#0x02
   09E6 28 01              1610 	jr	z,no_ex
   09E8 EB                 1611 	ex	de,hl
   09E9                    1612 	no_ex:
   09E9 ED A0              1613 	ldi
   09EB FD 7E 02           1614 	ld	a,2(iy)
   09EE FE F7              1615 	cp	#247
   09F0 30 11              1616 	jr	nc,pag_no_second
   09F2 ED A0              1617 	ldi
   09F4 FD 7E 06           1618 	ld	a,6(iy)
   09F7 E6 02              1619 	and	#0x02
   09F9 28 04              1620 	jr	z,not_put_1
   09FB 1B                 1621 	dec	de
   09FC 1B                 1622 	dec	de
   09FD 18 11              1623 	jr	pag_line_ok
   09FF                    1624 	not_put_1:
   09FF 2B                 1625 	dec	hl
   0A00 2B                 1626 	dec	hl
   0A01 18 0D              1627 	jr	pag_line_ok
   0A03                    1628 	pag_no_second:
   0A03 FD 7E 06           1629 	ld	a,6(iy)
   0A06 E6 02              1630 	and	#0x02
   0A08 28 04              1631 	jr	z,not_put_2
   0A0A 23                 1632 	inc	hl
   0A0B 1B                 1633 	dec	de
   0A0C 18 02              1634 	jr	pag_line_ok
   0A0E                    1635 	not_put_2:
   0A0E 13                 1636 	inc	de
   0A0F 2B                 1637 	dec	hl
   0A10                    1638 	pag_line_ok:
   0A10 FD 7E 06           1639 	ld	a,6(iy)
   0A13 E6 02              1640 	and	#0x02
   0A15 28 01              1641 	jr	z,no_ex_2
   0A17 EB                 1642 	ex	de,hl
   0A18                    1643 	no_ex_2:
   0A18 CDr67s09           1644 	call	directg_vmem_nextrow_addr_raw
   0A1B C1                 1645 	pop	bc
   0A1C 10 C2              1646 	djnz	pag_loop
   0A1E                    1647 	pag_done:
   0A1E C9                 1648 	ret
   0A1F                    1649 _directg_aligned_glyph_16x16_end::
                           1650 ;test.c:760: void directg_render_masked_glyph_16x16(byte x, byte y, byte *glyph, byte* mask) __naked {
                           1651 ;	---------------------------------
                           1652 ; Function directg_render_masked_glyph_16x16
                           1653 ; ---------------------------------
   0A1F                    1654 _directg_render_masked_glyph_16x16_start::
   0A1F                    1655 _directg_render_masked_glyph_16x16:
                           1656 ;test.c:868: __endasm;
   0A1F FD 21 00 00        1657 	ld	iy,#0x0000
   0A23 FD 39              1658 	add	iy,sp
   0A25 FD 7E 03           1659 	ld	a,3(iy)
   0A28 FE BF              1660 	cp	#191
   0A2A 30 63              1661 	jr	nc,rmg_done
   0A2C 4F                 1662 	ld	c,a
   0A2D C6 10              1663 	add	#16
   0A2F 47                 1664 	ld	b,a
   0A30 FE BF              1665 	cp	#191
   0A32 38 02              1666 	jr	c,rmg_bott_ok
   0A34 06 C0              1667 	ld	b,#191 + 1
   0A36                    1668 	rmg_bott_ok:
   0A36 78                 1669 	ld	a,b
   0A37 91                 1670 	sub	c
   0A38 47                 1671 	ld	b,a
   0A39 FD 5E 02           1672 	ld	e,2(iy)
   0A3C CDr3Ds09           1673 	call	directg_vmem_addr_raw
   0A3F D9                 1674 	exx
   0A40 FD 6E 04           1675 	ld	l,4(iy)
   0A43 FD 66 05           1676 	ld	h,5(iy)
   0A46 FD 5E 06           1677 	ld	e,6(iy)
   0A49 FD 56 07           1678 	ld	d,7(iy)
   0A4C D9                 1679 	exx
   0A4D                    1680 	rmg_loop:
   0A4D C5                 1681 	push	bc
   0A4E D9                 1682 	exx
   0A4F EB                 1683 	ex	de,hl
   0A50 4E                 1684 	ld	c,(hl)
   0A51 23                 1685 	inc	hl
   0A52 46                 1686 	ld	b,(hl)
   0A53 23                 1687 	inc	hl
   0A54 E5                 1688 	push	hl
   0A55 EB                 1689 	ex	de,hl
   0A56 5E                 1690 	ld	e,(hl)
   0A57 23                 1691 	inc	hl
   0A58 56                 1692 	ld	d,(hl)
   0A59 23                 1693 	inc	hl
   0A5A E5                 1694 	push	hl
   0A5B FD 7E 02           1695 	ld	a,2(iy)
   0A5E E6 07              1696 	and	#0x07
   0A60 28 0D              1697 	jr	z,rmg_dont_shift
   0A62                    1698 	rmg_shift:
   0A62 B7                 1699 	or	a
   0A63 CB 1B              1700 	rr	e
   0A65 CB 1A              1701 	rr	d
   0A67 37                 1702 	scf
   0A68 CB 19              1703 	rr	c
   0A6A CB 18              1704 	rr	b
   0A6C 3D                 1705 	dec	a
   0A6D 20 F3              1706 	jr	nz,rmg_shift
   0A6F                    1707 	rmg_dont_shift:
   0A6F C5                 1708 	push	bc
   0A70 D5                 1709 	push	de
   0A71 D9                 1710 	exx
   0A72 D1                 1711 	pop	de
   0A73 C1                 1712 	pop	bc
   0A74 D9                 1713 	exx
   0A75 E1                 1714 	pop	hl
   0A76 D1                 1715 	pop	de
   0A77 D9                 1716 	exx
   0A78 7E                 1717 	ld	a,(hl)
   0A79 A1                 1718 	and	c
   0A7A B3                 1719 	or	e
   0A7B 77                 1720 	ld	(hl),a
   0A7C FD 7E 02           1721 	ld	a,2(iy)
   0A7F FE F7              1722 	cp	#247
   0A81 30 06              1723 	jr	nc,rmg_no_second
   0A83 23                 1724 	inc	hl
   0A84 7E                 1725 	ld	a,(hl)
   0A85 A0                 1726 	and	b
   0A86 B2                 1727 	or	d
   0A87 77                 1728 	ld	(hl),a
   0A88 2B                 1729 	dec	hl
   0A89                    1730 	rmg_no_second:
   0A89 CDr67s09           1731 	call	directg_vmem_nextrow_addr_raw
   0A8C C1                 1732 	pop	bc
   0A8D 10 BE              1733 	djnz	rmg_loop
   0A8F                    1734 	rmg_done:
   0A8F C9                 1735 	ret
   0A90                    1736 _directg_render_masked_glyph_16x16_end::
                           1737 	.area _CODE
                           1738 	.area _CABS
