                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.1.0 #7066 (Jun 14 2012) (Linux)
                              4 ; This file was generated Tue Nov 27 20:21:26 2012
                              5 ;--------------------------------------------------------
                              6 	.module keyboard
                              7 	.optsdcc -mz80
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _kbd_scan
                             13 	.globl _kbd_get_key
                             14 	.globl _evt_set
                             15 	.globl _mem_free
                             16 	.globl _mem_allocate
                             17 	.globl _sym_kbd_map
                             18 	.globl _caps_kbd_map
                             19 	.globl _kbd_map
                             20 	.globl _kbd_lastkey
                             21 	.globl _kbd_buff_tail
                             22 	.globl _kbd_buff_head
                             23 	.globl _kbd_buffer
                             24 	.globl _kbd_exclusive_handle
                             25 	.globl _kbd_open
                             26 	.globl _kbd_close
                             27 	.globl _kbd_read_async
                             28 	.globl _kbd_timer_hook
                             29 ;--------------------------------------------------------
                             30 ; special function registers
                             31 ;--------------------------------------------------------
                             32 ;--------------------------------------------------------
                             33 ;  ram data
                             34 ;--------------------------------------------------------
                             35 	.area _DATA
   0000                      36 _kbd_exclusive_handle::
   0000                      37 	.ds 2
   0002                      38 _kbd_buffer::
   0002                      39 	.ds 32
   0022                      40 _kbd_buff_head::
   0022                      41 	.ds 1
   0023                      42 _kbd_buff_tail::
   0023                      43 	.ds 1
   0024                      44 _kbd_lastkey::
   0024                      45 	.ds 1
   0025                      46 _kbd_map::
   0025                      47 	.ds 40
   004D                      48 _caps_kbd_map::
   004D                      49 	.ds 40
   0075                      50 _sym_kbd_map::
   0075                      51 	.ds 40
                             52 ;--------------------------------------------------------
                             53 ; overlayable items in  ram 
                             54 ;--------------------------------------------------------
                             55 	.area _OVERLAY
                             56 ;--------------------------------------------------------
                             57 ; external initialized ram data
                             58 ;--------------------------------------------------------
                             59 ;--------------------------------------------------------
                             60 ; global & static initialisations
                             61 ;--------------------------------------------------------
                             62 	.area _HOME
                             63 	.area _GSINIT
                             64 	.area _GSFINAL
                             65 	.area _GSINIT
                             66 ;keyboard.c:9: kbd_handle_t *kbd_exclusive_handle=NULL;
   0000 FD 21r00s00          67 	ld	iy,#_kbd_exclusive_handle
   0004 FD 36 00 00          68 	ld	0 (iy),#0x00
   0008 FD 36 01 00          69 	ld	1 (iy),#0x00
                             70 ;keyboard.c:11: byte kbd_buff_head=0;
   000C FD 21r22s00          71 	ld	iy,#_kbd_buff_head
   0010 FD 36 00 00          72 	ld	0 (iy),#0x00
                             73 ;keyboard.c:12: byte kbd_buff_tail=0;
   0014 FD 21r23s00          74 	ld	iy,#_kbd_buff_tail
   0018 FD 36 00 00          75 	ld	0 (iy),#0x00
                             76 ;keyboard.c:13: byte kbd_lastkey=0;
   001C FD 21r24s00          77 	ld	iy,#_kbd_lastkey
   0020 FD 36 00 00          78 	ld	0 (iy),#0x00
                             79 ;keyboard.c:18: byte kbd_map[]={
   0024 21r25s00             80 	ld	hl,#_kbd_map
   0027 36 01                81 	ld	(hl),#0x01
   0029 23                   82 	inc	hl
   002A 36 7A                83 	ld	(hl),#0x7A
   002C 21r27s00             84 	ld	hl,#_kbd_map + 2
   002F 36 78                85 	ld	(hl),#0x78
   0031 21r28s00             86 	ld	hl,#_kbd_map + 3
   0034 36 63                87 	ld	(hl),#0x63
   0036 21r29s00             88 	ld	hl,#_kbd_map + 4
   0039 36 76                89 	ld	(hl),#0x76
   003B 21r2As00             90 	ld	hl,#_kbd_map + 5
   003E 36 61                91 	ld	(hl),#0x61
   0040 21r2Bs00             92 	ld	hl,#_kbd_map + 6
   0043 36 73                93 	ld	(hl),#0x73
   0045 21r2Cs00             94 	ld	hl,#_kbd_map + 7
   0048 36 64                95 	ld	(hl),#0x64
   004A 21r2Ds00             96 	ld	hl,#_kbd_map + 8
   004D 36 66                97 	ld	(hl),#0x66
   004F 21r2Es00             98 	ld	hl,#_kbd_map + 9
   0052 36 67                99 	ld	(hl),#0x67
   0054 21r2Fs00            100 	ld	hl,#_kbd_map + 10
   0057 36 71               101 	ld	(hl),#0x71
   0059 21r30s00            102 	ld	hl,#_kbd_map + 11
   005C 36 77               103 	ld	(hl),#0x77
   005E 21r31s00            104 	ld	hl,#_kbd_map + 12
   0061 36 65               105 	ld	(hl),#0x65
   0063 21r32s00            106 	ld	hl,#_kbd_map + 13
   0066 36 72               107 	ld	(hl),#0x72
   0068 21r33s00            108 	ld	hl,#_kbd_map + 14
   006B 36 74               109 	ld	(hl),#0x74
   006D 21r34s00            110 	ld	hl,#_kbd_map + 15
   0070 36 31               111 	ld	(hl),#0x31
   0072 21r35s00            112 	ld	hl,#_kbd_map + 16
   0075 36 32               113 	ld	(hl),#0x32
   0077 21r36s00            114 	ld	hl,#_kbd_map + 17
   007A 36 33               115 	ld	(hl),#0x33
   007C 21r37s00            116 	ld	hl,#_kbd_map + 18
   007F 36 34               117 	ld	(hl),#0x34
   0081 21r38s00            118 	ld	hl,#_kbd_map + 19
   0084 36 35               119 	ld	(hl),#0x35
   0086 21r39s00            120 	ld	hl,#_kbd_map + 20
   0089 36 30               121 	ld	(hl),#0x30
   008B 21r3As00            122 	ld	hl,#_kbd_map + 21
   008E 36 39               123 	ld	(hl),#0x39
   0090 21r3Bs00            124 	ld	hl,#_kbd_map + 22
   0093 36 38               125 	ld	(hl),#0x38
   0095 21r3Cs00            126 	ld	hl,#_kbd_map + 23
   0098 36 37               127 	ld	(hl),#0x37
   009A 21r3Ds00            128 	ld	hl,#_kbd_map + 24
   009D 36 36               129 	ld	(hl),#0x36
   009F 21r3Es00            130 	ld	hl,#_kbd_map + 25
   00A2 36 70               131 	ld	(hl),#0x70
   00A4 21r3Fs00            132 	ld	hl,#_kbd_map + 26
   00A7 36 6F               133 	ld	(hl),#0x6F
   00A9 21r40s00            134 	ld	hl,#_kbd_map + 27
   00AC 36 69               135 	ld	(hl),#0x69
   00AE 21r41s00            136 	ld	hl,#_kbd_map + 28
   00B1 36 75               137 	ld	(hl),#0x75
   00B3 21r42s00            138 	ld	hl,#_kbd_map + 29
   00B6 36 79               139 	ld	(hl),#0x79
   00B8 21r43s00            140 	ld	hl,#_kbd_map + 30
   00BB 36 0D               141 	ld	(hl),#0x0D
   00BD 21r44s00            142 	ld	hl,#_kbd_map + 31
   00C0 36 6C               143 	ld	(hl),#0x6C
   00C2 21r45s00            144 	ld	hl,#_kbd_map + 32
   00C5 36 6B               145 	ld	(hl),#0x6B
   00C7 21r46s00            146 	ld	hl,#_kbd_map + 33
   00CA 36 6A               147 	ld	(hl),#0x6A
   00CC 21r47s00            148 	ld	hl,#_kbd_map + 34
   00CF 36 68               149 	ld	(hl),#0x68
   00D1 21r48s00            150 	ld	hl,#_kbd_map + 35
   00D4 36 20               151 	ld	(hl),#0x20
   00D6 21r49s00            152 	ld	hl,#_kbd_map + 36
   00D9 36 02               153 	ld	(hl),#0x02
   00DB 21r4As00            154 	ld	hl,#_kbd_map + 37
   00DE 36 6D               155 	ld	(hl),#0x6D
   00E0 21r4Bs00            156 	ld	hl,#_kbd_map + 38
   00E3 36 6E               157 	ld	(hl),#0x6E
   00E5 21r4Cs00            158 	ld	hl,#_kbd_map + 39
   00E8 36 62               159 	ld	(hl),#0x62
                            160 ;keyboard.c:29: byte caps_kbd_map[]= {
   00EA 21r4Ds00            161 	ld	hl,#_caps_kbd_map
   00ED 36 FF               162 	ld	(hl),#0xFF
   00EF 23                  163 	inc	hl
   00F0 36 5A               164 	ld	(hl),#0x5A
   00F2 21r4Fs00            165 	ld	hl,#_caps_kbd_map + 2
   00F5 36 58               166 	ld	(hl),#0x58
   00F7 21r50s00            167 	ld	hl,#_caps_kbd_map + 3
   00FA 36 43               168 	ld	(hl),#0x43
   00FC 21r51s00            169 	ld	hl,#_caps_kbd_map + 4
   00FF 36 56               170 	ld	(hl),#0x56
   0101 21r52s00            171 	ld	hl,#_caps_kbd_map + 5
   0104 36 41               172 	ld	(hl),#0x41
   0106 21r53s00            173 	ld	hl,#_caps_kbd_map + 6
   0109 36 53               174 	ld	(hl),#0x53
   010B 21r54s00            175 	ld	hl,#_caps_kbd_map + 7
   010E 36 44               176 	ld	(hl),#0x44
   0110 21r55s00            177 	ld	hl,#_caps_kbd_map + 8
   0113 36 46               178 	ld	(hl),#0x46
   0115 21r56s00            179 	ld	hl,#_caps_kbd_map + 9
   0118 36 47               180 	ld	(hl),#0x47
   011A 21r57s00            181 	ld	hl,#_caps_kbd_map + 10
   011D 36 51               182 	ld	(hl),#0x51
   011F 21r58s00            183 	ld	hl,#_caps_kbd_map + 11
   0122 36 57               184 	ld	(hl),#0x57
   0124 21r59s00            185 	ld	hl,#_caps_kbd_map + 12
   0127 36 45               186 	ld	(hl),#0x45
   0129 21r5As00            187 	ld	hl,#_caps_kbd_map + 13
   012C 36 52               188 	ld	(hl),#0x52
   012E 21r5Bs00            189 	ld	hl,#_caps_kbd_map + 14
   0131 36 54               190 	ld	(hl),#0x54
   0133 21r5Cs00            191 	ld	hl,#_caps_kbd_map + 15
   0136 36 31               192 	ld	(hl),#0x31
   0138 21r5Ds00            193 	ld	hl,#_caps_kbd_map + 16
   013B 36 32               194 	ld	(hl),#0x32
   013D 21r5Es00            195 	ld	hl,#_caps_kbd_map + 17
   0140 36 33               196 	ld	(hl),#0x33
   0142 21r5Fs00            197 	ld	hl,#_caps_kbd_map + 18
   0145 36 34               198 	ld	(hl),#0x34
   0147 21r60s00            199 	ld	hl,#_caps_kbd_map + 19
   014A 36 08               200 	ld	(hl),#0x08
   014C 21r61s00            201 	ld	hl,#_caps_kbd_map + 20
   014F 36 0C               202 	ld	(hl),#0x0C
   0151 21r62s00            203 	ld	hl,#_caps_kbd_map + 21
   0154 36 39               204 	ld	(hl),#0x39
   0156 21r63s00            205 	ld	hl,#_caps_kbd_map + 22
   0159 36 09               206 	ld	(hl),#0x09
   015B 21r64s00            207 	ld	hl,#_caps_kbd_map + 23
   015E 36 0B               208 	ld	(hl),#0x0B
   0160 21r65s00            209 	ld	hl,#_caps_kbd_map + 24
   0163 36 0A               210 	ld	(hl),#0x0A
   0165 21r66s00            211 	ld	hl,#_caps_kbd_map + 25
   0168 36 50               212 	ld	(hl),#0x50
   016A 21r67s00            213 	ld	hl,#_caps_kbd_map + 26
   016D 36 4F               214 	ld	(hl),#0x4F
   016F 21r68s00            215 	ld	hl,#_caps_kbd_map + 27
   0172 36 49               216 	ld	(hl),#0x49
   0174 21r69s00            217 	ld	hl,#_caps_kbd_map + 28
   0177 36 55               218 	ld	(hl),#0x55
   0179 21r6As00            219 	ld	hl,#_caps_kbd_map + 29
   017C 36 59               220 	ld	(hl),#0x59
   017E 21r6Bs00            221 	ld	hl,#_caps_kbd_map + 30
   0181 36 0D               222 	ld	(hl),#0x0D
   0183 21r6Cs00            223 	ld	hl,#_caps_kbd_map + 31
   0186 36 4C               224 	ld	(hl),#0x4C
   0188 21r6Ds00            225 	ld	hl,#_caps_kbd_map + 32
   018B 36 4B               226 	ld	(hl),#0x4B
   018D 21r6Es00            227 	ld	hl,#_caps_kbd_map + 33
   0190 36 4A               228 	ld	(hl),#0x4A
   0192 21r6Fs00            229 	ld	hl,#_caps_kbd_map + 34
   0195 36 48               230 	ld	(hl),#0x48
   0197 21r70s00            231 	ld	hl,#_caps_kbd_map + 35
   019A 36 04               232 	ld	(hl),#0x04
   019C 21r71s00            233 	ld	hl,#_caps_kbd_map + 36
   019F 36 03               234 	ld	(hl),#0x03
   01A1 21r72s00            235 	ld	hl,#_caps_kbd_map + 37
   01A4 36 4D               236 	ld	(hl),#0x4D
   01A6 21r73s00            237 	ld	hl,#_caps_kbd_map + 38
   01A9 36 4E               238 	ld	(hl),#0x4E
   01AB 21r74s00            239 	ld	hl,#_caps_kbd_map + 39
   01AE 36 42               240 	ld	(hl),#0x42
                            241 ;keyboard.c:40: byte sym_kbd_map[]={
   01B0 21r75s00            242 	ld	hl,#_sym_kbd_map
   01B3 36 03               243 	ld	(hl),#0x03
   01B5 23                  244 	inc	hl
   01B6 36 3A               245 	ld	(hl),#0x3A
   01B8 21r77s00            246 	ld	hl,#_sym_kbd_map + 2
   01BB 36 60               247 	ld	(hl),#0x60
   01BD 21r78s00            248 	ld	hl,#_sym_kbd_map + 3
   01C0 36 3F               249 	ld	(hl),#0x3F
   01C2 21r79s00            250 	ld	hl,#_sym_kbd_map + 4
   01C5 36 2F               251 	ld	(hl),#0x2F
   01C7 21r7As00            252 	ld	hl,#_sym_kbd_map + 5
   01CA 36 7E               253 	ld	(hl),#0x7E
   01CC 21r7Bs00            254 	ld	hl,#_sym_kbd_map + 6
   01CF 36 7C               255 	ld	(hl),#0x7C
   01D1 21r7Cs00            256 	ld	hl,#_sym_kbd_map + 7
   01D4 36 5C               257 	ld	(hl),#0x5C
   01D6 21r7Ds00            258 	ld	hl,#_sym_kbd_map + 8
   01D9 36 7B               259 	ld	(hl),#0x7B
   01DB 21r7Es00            260 	ld	hl,#_sym_kbd_map + 9
   01DE 36 7D               261 	ld	(hl),#0x7D
   01E0 21r7Fs00            262 	ld	hl,#_sym_kbd_map + 10
   01E3 36 FF               263 	ld	(hl),#0xFF
   01E5 21r80s00            264 	ld	hl,#_sym_kbd_map + 11
   01E8 36 FF               265 	ld	(hl),#0xFF
   01EA 21r81s00            266 	ld	hl,#_sym_kbd_map + 12
   01ED 36 FF               267 	ld	(hl),#0xFF
   01EF 21r82s00            268 	ld	hl,#_sym_kbd_map + 13
   01F2 36 3C               269 	ld	(hl),#0x3C
   01F4 21r83s00            270 	ld	hl,#_sym_kbd_map + 14
   01F7 36 3E               271 	ld	(hl),#0x3E
   01F9 21r84s00            272 	ld	hl,#_sym_kbd_map + 15
   01FC 36 21               273 	ld	(hl),#0x21
   01FE 21r85s00            274 	ld	hl,#_sym_kbd_map + 16
   0201 36 40               275 	ld	(hl),#0x40
   0203 21r86s00            276 	ld	hl,#_sym_kbd_map + 17
   0206 36 23               277 	ld	(hl),#0x23
   0208 21r87s00            278 	ld	hl,#_sym_kbd_map + 18
   020B 36 24               279 	ld	(hl),#0x24
   020D 21r88s00            280 	ld	hl,#_sym_kbd_map + 19
   0210 36 25               281 	ld	(hl),#0x25
   0212 21r89s00            282 	ld	hl,#_sym_kbd_map + 20
   0215 36 5F               283 	ld	(hl),#0x5F
   0217 21r8As00            284 	ld	hl,#_sym_kbd_map + 21
   021A 36 29               285 	ld	(hl),#0x29
   021C 21r8Bs00            286 	ld	hl,#_sym_kbd_map + 22
   021F 36 28               287 	ld	(hl),#0x28
   0221 21r8Cs00            288 	ld	hl,#_sym_kbd_map + 23
   0224 36 27               289 	ld	(hl),#0x27
   0226 21r8Ds00            290 	ld	hl,#_sym_kbd_map + 24
   0229 36 26               291 	ld	(hl),#0x26
   022B 21r8Es00            292 	ld	hl,#_sym_kbd_map + 25
   022E 36 22               293 	ld	(hl),#0x22
   0230 21r8Fs00            294 	ld	hl,#_sym_kbd_map + 26
   0233 36 3B               295 	ld	(hl),#0x3B
   0235 21r90s00            296 	ld	hl,#_sym_kbd_map + 27
   0238 36 7F               297 	ld	(hl),#0x7F
   023A 21r91s00            298 	ld	hl,#_sym_kbd_map + 28
   023D 36 5D               299 	ld	(hl),#0x5D
   023F 21r92s00            300 	ld	hl,#_sym_kbd_map + 29
   0242 36 5B               301 	ld	(hl),#0x5B
   0244 21r93s00            302 	ld	hl,#_sym_kbd_map + 30
   0247 36 0D               303 	ld	(hl),#0x0D
   0249 21r94s00            304 	ld	hl,#_sym_kbd_map + 31
   024C 36 3D               305 	ld	(hl),#0x3D
   024E 21r95s00            306 	ld	hl,#_sym_kbd_map + 32
   0251 36 2B               307 	ld	(hl),#0x2B
   0253 21r96s00            308 	ld	hl,#_sym_kbd_map + 33
   0256 36 2D               309 	ld	(hl),#0x2D
   0258 21r97s00            310 	ld	hl,#_sym_kbd_map + 34
   025B 36 5E               311 	ld	(hl),#0x5E
   025D 21r98s00            312 	ld	hl,#_sym_kbd_map + 35
   0260 36 05               313 	ld	(hl),#0x05
   0262 21r99s00            314 	ld	hl,#_sym_kbd_map + 36
   0265 36 FF               315 	ld	(hl),#0xFF
   0267 21r9As00            316 	ld	hl,#_sym_kbd_map + 37
   026A 36 2E               317 	ld	(hl),#0x2E
   026C 21r9Bs00            318 	ld	hl,#_sym_kbd_map + 38
   026F 36 2C               319 	ld	(hl),#0x2C
   0271 21r9Cs00            320 	ld	hl,#_sym_kbd_map + 39
   0274 36 2A               321 	ld	(hl),#0x2A
                            322 ;--------------------------------------------------------
                            323 ; Home
                            324 ;--------------------------------------------------------
                            325 	.area _HOME
                            326 	.area _HOME
                            327 ;--------------------------------------------------------
                            328 ; code
                            329 ;--------------------------------------------------------
                            330 	.area _CODE
                            331 ;keyboard.c:54: word kbd_open(struct driver_s *drv, uint8_t *hint, uint16_t attr) {
                            332 ;	---------------------------------
                            333 ; Function kbd_open
                            334 ; ---------------------------------
   0000                     335 _kbd_open_start::
   0000                     336 _kbd_open:
   0000 DD E5               337 	push	ix
   0002 DD 21 00 00         338 	ld	ix,#0
   0006 DD 39               339 	add	ix,sp
                            340 ;keyboard.c:55: if (kbd_exclusive_handle!=NULL) {
   0008 FD 21r00s00         341 	ld	iy,#_kbd_exclusive_handle
   000C FD 7E 01            342 	ld	a,1 (iy)
   000F FD B6 00            343 	or	a,0 (iy)
   0012 28 0A               344 	jr	Z,00102$
                            345 ;keyboard.c:56: last_error=RESULT_CANT_LOCK;
   0014 21r00s00            346 	ld	hl,#_last_error + 0
   0017 36 03               347 	ld	(hl), #0x03
                            348 ;keyboard.c:57: return NULL;
   0019 21 00 00            349 	ld	hl,#0x0000
   001C 18 53               350 	jr	00104$
   001E                     351 00102$:
                            352 ;keyboard.c:59: kbd_exclusive_handle=mem_allocate(sizeof(kbd_handle_t), (word)tsk_current);
   001E 2Ar00s00            353 	ld	hl,(_tsk_current)
   0021 E5                  354 	push	hl
   0022 21 08 00            355 	ld	hl,#0x0008
   0025 E5                  356 	push	hl
   0026 CDr00s00            357 	call	_mem_allocate
   0029 F1                  358 	pop	af
   002A F1                  359 	pop	af
   002B FD 21r00s00         360 	ld	iy,#_kbd_exclusive_handle
   002F FD 75 00            361 	ld	0 (iy),l
   0032 FD 74 01            362 	ld	1 (iy),h
                            363 ;keyboard.c:60: kbd_exclusive_handle->driver=drv;
   0035 2Ar00s00            364 	ld	hl,(_kbd_exclusive_handle)
   0038 DD 7E 04            365 	ld	a,4 (ix)
   003B 77                  366 	ld	(hl),a
   003C 23                  367 	inc	hl
   003D DD 7E 05            368 	ld	a,5 (ix)
   0040 77                  369 	ld	(hl),a
                            370 ;keyboard.c:61: kbd_exclusive_handle->owner=tsk_current;
   0041 2Ar00s00            371 	ld	hl,(_kbd_exclusive_handle)
   0044 23                  372 	inc	hl
   0045 23                  373 	inc	hl
   0046 FD 21r00s00         374 	ld	iy,#_tsk_current
   004A FD 7E 00            375 	ld	a,0 (iy)
   004D 77                  376 	ld	(hl),a
   004E 23                  377 	inc	hl
   004F FD 7E 01            378 	ld	a,1 (iy)
   0052 77                  379 	ld	(hl),a
                            380 ;keyboard.c:62: kbd_exclusive_handle->read_done=NULL;
   0053 2Ar00s00            381 	ld	hl,(_kbd_exclusive_handle)
   0056 01 06 00            382 	ld	bc,#0x0006
   0059 09                  383 	add	hl,bc
   005A AF                  384 	xor	a, a
   005B 77                  385 	ld	(hl), a
   005C 23                  386 	inc	hl
   005D 77                  387 	ld	(hl), a
                            388 ;keyboard.c:63: kbd_exclusive_handle->ret_char=NULL;
   005E 2Ar00s00            389 	ld	hl,(_kbd_exclusive_handle)
   0061 01 04 00            390 	ld	bc,#0x0004
   0064 09                  391 	add	hl,bc
   0065 AF                  392 	xor	a, a
   0066 77                  393 	ld	(hl), a
   0067 23                  394 	inc	hl
   0068 77                  395 	ld	(hl), a
                            396 ;keyboard.c:64: last_error=RESULT_SUCCESS;
   0069 21r00s00            397 	ld	hl,#_last_error + 0
   006C 36 00               398 	ld	(hl), #0x00
                            399 ;keyboard.c:66: return (word)kbd_exclusive_handle;
   006E 2Ar00s00            400 	ld	hl,(_kbd_exclusive_handle)
   0071                     401 00104$:
   0071 DD E1               402 	pop	ix
   0073 C9                  403 	ret
   0074                     404 _kbd_open_end::
                            405 ;keyboard.c:69: void kbd_close(word handle) {
                            406 ;	---------------------------------
                            407 ; Function kbd_close
                            408 ; ---------------------------------
   0074                     409 _kbd_close_start::
   0074                     410 _kbd_close:
   0074 DD E5               411 	push	ix
   0076 DD 21 00 00         412 	ld	ix,#0
   007A DD 39               413 	add	ix,sp
                            414 ;keyboard.c:70: if (handle!=(word)kbd_exclusive_handle)
   007C ED 5Br00s00         415 	ld	de,(_kbd_exclusive_handle)
   0080 DD 7E 04            416 	ld	a,4 (ix)
   0083 93                  417 	sub	a, e
   0084 20 06               418 	jr	NZ,00107$
   0086 DD 7E 05            419 	ld	a,5 (ix)
   0089 92                  420 	sub	a, d
   008A 28 07               421 	jr	Z,00102$
   008C                     422 00107$:
                            423 ;keyboard.c:71: last_error=RESULT_DONT_OWN;
   008C 21r00s00            424 	ld	hl,#_last_error + 0
   008F 36 01               425 	ld	(hl), #0x01
   0091 18 19               426 	jr	00104$
   0093                     427 00102$:
                            428 ;keyboard.c:73: mem_free(kbd_exclusive_handle);
   0093 2Ar00s00            429 	ld	hl,(_kbd_exclusive_handle)
   0096 E5                  430 	push	hl
   0097 CDr00s00            431 	call	_mem_free
   009A F1                  432 	pop	af
                            433 ;keyboard.c:74: kbd_exclusive_handle=NULL;
   009B FD 21r00s00         434 	ld	iy,#_kbd_exclusive_handle
   009F FD 36 00 00         435 	ld	0 (iy),#0x00
   00A3 FD 36 01 00         436 	ld	1 (iy),#0x00
                            437 ;keyboard.c:75: last_error=RESULT_SUCCESS;
   00A7 21r00s00            438 	ld	hl,#_last_error + 0
   00AA 36 00               439 	ld	(hl), #0x00
   00AC                     440 00104$:
   00AC DD E1               441 	pop	ix
   00AE C9                  442 	ret
   00AF                     443 _kbd_close_end::
                            444 ;keyboard.c:79: result kbd_read_async(word handle, uint8_t *buffer, uint16_t count, event_t *done) {
                            445 ;	---------------------------------
                            446 ; Function kbd_read_async
                            447 ; ---------------------------------
   00AF                     448 _kbd_read_async_start::
   00AF                     449 _kbd_read_async:
   00AF DD E5               450 	push	ix
   00B1 DD 21 00 00         451 	ld	ix,#0
   00B5 DD 39               452 	add	ix,sp
                            453 ;keyboard.c:80: if (handle!=(word)kbd_exclusive_handle)
   00B7 ED 5Br00s00         454 	ld	de,(_kbd_exclusive_handle)
   00BB DD 7E 04            455 	ld	a,4 (ix)
   00BE 93                  456 	sub	a, e
   00BF 20 06               457 	jr	NZ,00115$
   00C1 DD 7E 05            458 	ld	a,5 (ix)
   00C4 92                  459 	sub	a, d
   00C5 28 09               460 	jr	Z,00108$
   00C7                     461 00115$:
                            462 ;keyboard.c:81: return last_error=RESULT_DONT_OWN;
   00C7 21r00s00            463 	ld	hl,#_last_error + 0
   00CA 36 01               464 	ld	(hl), #0x01
   00CC 2E 01               465 	ld	l,#0x01
   00CE 18 53               466 	jr	00110$
   00D0                     467 00108$:
                            468 ;keyboard.c:83: if (kbd_exclusive_handle->read_done!=NULL)
   00D0 2Ar00s00            469 	ld	hl,(_kbd_exclusive_handle)
   00D3 01 06 00            470 	ld	bc,#0x0006
   00D6 09                  471 	add	hl,bc
   00D7 56                  472 	ld	d,(hl)
   00D8 23                  473 	inc	hl
   00D9 7E                  474 	ld	a, (hl)
   00DA B2                  475 	or	a,d
   00DB 28 09               476 	jr	Z,00105$
                            477 ;keyboard.c:84: return last_error=RESULT_CANT_LOCK;
   00DD 21r00s00            478 	ld	hl,#_last_error + 0
   00E0 36 03               479 	ld	(hl), #0x03
   00E2 2E 03               480 	ld	l,#0x03
   00E4 18 3D               481 	jr	00110$
   00E6                     482 00105$:
                            483 ;keyboard.c:85: else if (count!=1) /* can only read single byte from driver */
   00E6 DD 7E 08            484 	ld	a,8 (ix)
   00E9 D6 01               485 	sub	a, #0x01
   00EB 20 06               486 	jr	NZ,00116$
   00ED DD 7E 09            487 	ld	a,9 (ix)
   00F0 B7                  488 	or	a, a
   00F1 28 09               489 	jr	Z,00102$
   00F3                     490 00116$:
                            491 ;keyboard.c:86: return last_error=RESULT_INVALID_PARAMETER;
   00F3 21r00s00            492 	ld	hl,#_last_error + 0
   00F6 36 04               493 	ld	(hl), #0x04
   00F8 2E 04               494 	ld	l,#0x04
   00FA 18 27               495 	jr	00110$
   00FC                     496 00102$:
                            497 ;keyboard.c:88: kbd_exclusive_handle->read_done=done;
   00FC 2Ar00s00            498 	ld	hl,(_kbd_exclusive_handle)
   00FF 01 06 00            499 	ld	bc,#0x0006
   0102 09                  500 	add	hl,bc
   0103 DD 7E 0A            501 	ld	a,10 (ix)
   0106 77                  502 	ld	(hl),a
   0107 23                  503 	inc	hl
   0108 DD 7E 0B            504 	ld	a,11 (ix)
   010B 77                  505 	ld	(hl),a
                            506 ;keyboard.c:89: kbd_exclusive_handle->ret_char=buffer;
   010C 2Ar00s00            507 	ld	hl,(_kbd_exclusive_handle)
   010F 01 04 00            508 	ld	bc,#0x0004
   0112 09                  509 	add	hl,bc
   0113 DD 7E 06            510 	ld	a,6 (ix)
   0116 77                  511 	ld	(hl),a
   0117 23                  512 	inc	hl
   0118 DD 7E 07            513 	ld	a,7 (ix)
   011B 77                  514 	ld	(hl),a
                            515 ;keyboard.c:90: return last_error=RESULT_SUCCESS;
   011C 21r00s00            516 	ld	hl,#_last_error + 0
   011F 36 00               517 	ld	(hl), #0x00
   0121 2E 00               518 	ld	l,#0x00
   0123                     519 00110$:
   0123 DD E1               520 	pop	ix
   0125 C9                  521 	ret
   0126                     522 _kbd_read_async_end::
                            523 ;keyboard.c:95: void kbd_timer_hook() {
                            524 ;	---------------------------------
                            525 ; Function kbd_timer_hook
                            526 ; ---------------------------------
   0126                     527 _kbd_timer_hook_start::
   0126                     528 _kbd_timer_hook:
                            529 ;keyboard.c:100: kbd_scan();
   0126 CDr99s01            530 	call	_kbd_scan
                            531 ;keyboard.c:103: if (kbd_exclusive_handle!=NULL &&
   0129 FD 21r00s00         532 	ld	iy,#_kbd_exclusive_handle
   012D FD 7E 01            533 	ld	a,1 (iy)
   0130 FD B6 00            534 	or	a,0 (iy)
   0133 C8                  535 	ret	Z
                            536 ;keyboard.c:104: kbd_exclusive_handle->read_done!=NULL && 
   0134 2Ar00s00            537 	ld	hl,(_kbd_exclusive_handle)
   0137 01 06 00            538 	ld	bc,#0x0006
   013A 09                  539 	add	hl,bc
   013B 5E                  540 	ld	e,(hl)
   013C 23                  541 	inc	hl
   013D 7E                  542 	ld	a, (hl)
   013E B3                  543 	or	a,e
   013F C8                  544 	ret	Z
                            545 ;keyboard.c:105: kbd_exclusive_handle->ret_char!=NULL) {
   0140 2Ar00s00            546 	ld	hl,(_kbd_exclusive_handle)
   0143 01 04 00            547 	ld	bc,#0x0004
   0146 09                  548 	add	hl,bc
   0147 5E                  549 	ld	e,(hl)
   0148 23                  550 	inc	hl
   0149 7E                  551 	ld	a, (hl)
   014A B3                  552 	or	a,e
   014B C8                  553 	ret	Z
                            554 ;keyboard.c:107: the_key=kbd_get_key();
   014C CDr74s01            555 	call	_kbd_get_key
   014F 5D                  556 	ld	e,l
                            557 ;keyboard.c:108: if (the_key) {
   0150 7C                  558 	ld	a, h
   0151 B3                  559 	or	a,e
   0152 C8                  560 	ret	Z
                            561 ;keyboard.c:109: *(kbd_exclusive_handle->ret_char)=the_key;
   0153 2Ar00s00            562 	ld	hl,(_kbd_exclusive_handle)
   0156 01 04 00            563 	ld	bc,#0x0004
   0159 09                  564 	add	hl,bc
   015A 7E                  565 	ld	a,(hl)
   015B 23                  566 	inc	hl
   015C 66                  567 	ld	h,(hl)
   015D 6F                  568 	ld	l,a
   015E 73                  569 	ld	(hl),e
                            570 ;keyboard.c:110: evt_set(kbd_exclusive_handle->read_done,signaled);
   015F 2Ar00s00            571 	ld	hl,(_kbd_exclusive_handle)
   0162 01 06 00            572 	ld	bc,#0x0006
   0165 09                  573 	add	hl,bc
   0166 5E                  574 	ld	e,(hl)
   0167 23                  575 	inc	hl
   0168 56                  576 	ld	d,(hl)
   0169 3E 01               577 	ld	a,#0x01
   016B F5                  578 	push	af
   016C 33                  579 	inc	sp
   016D D5                  580 	push	de
   016E CDr00s00            581 	call	_evt_set
   0171 F1                  582 	pop	af
   0172 33                  583 	inc	sp
   0173 C9                  584 	ret
   0174                     585 _kbd_timer_hook_end::
                            586 ;keyboard.c:115: word kbd_get_key() __naked {
                            587 ;	---------------------------------
                            588 ; Function kbd_get_key
                            589 ; ---------------------------------
   0174                     590 _kbd_get_key_start::
   0174                     591 _kbd_get_key:
                            592 ;keyboard.c:140: __endasm;
   0174 21r23s00            593 	ld	hl,#_kbd_buff_tail ; end of kbd buffer
   0177 46                  594 	ld	b,(hl) ; to b
   0178 21r22s00            595 	ld	hl,#_kbd_buff_head ; start of kbd buffer
   017B 7E                  596 	ld	a,(hl) ; to a
   017C B8                  597 	cp	b ; kbd buffer empty?
   017D 20 04               598 	jr	nz,key_avail
   017F 21 00 00            599 	ld	hl,#0 ; return 0 in hl
   0182 C9                  600 	ret
   0183                     601 	key_avail:
   0183 16 00               602 	ld	d,#0
   0185 5F                  603 	ld	e,a
   0186 3C                  604 	inc	a ; next position in buffer
   0187 FE 20               605 	cp	#32 ; end of buffer?
   0189 28 02               606 	jr	z,resetbstart
   018B 18 02               607 	jr	updatebstart
   018D                     608 	resetbstart:
   018D 3E 00               609 	ld	a,#0 ; buffer overflow
   018F                     610 	updatebstart:
   018F 77                  611 	ld	(hl),a ; write to tail
   0190 21r02s00            612 	ld	hl,#_kbd_buffer
   0193 19                  613 	add	hl,de ; hl points to next key
   0194 7E                  614 	ld	a,(hl) ; get the key
   0195 26 00               615 	ld	h,#0
   0197 6F                  616 	ld	l,a ; and store to hl
   0198                     617 	endread:
   0198 C9                  618 	ret
   0199                     619 _kbd_get_key_end::
                            620 ;keyboard.c:143: word kbd_scan() {
                            621 ;	---------------------------------
                            622 ; Function kbd_scan
                            623 ; ---------------------------------
   0199                     624 _kbd_scan_start::
   0199                     625 _kbd_scan:
                            626 ;keyboard.c:278: __endasm;
   0199 2E 01               627 	ld	l,#1
   019B 01 FE FE            628 	ld	bc,#0xfefe ; first line to scan
   019E 11 00 00            629 	ld	de,#0x0000 ; de holds "downed" keys
   01A1                     630 	scanline:
   01A1 ED 78               631 	in	a,(c) ; read kbd
   01A3 F6 E0               632 	or	#0xe0 ; set bits 5-7 of a
   01A5 FE FF               633 	cp	#0xff ; all bits set?
   01A7 20 07               634 	jr	nz,testbits ; no key down
   01A9 2C                  635 	inc	l
   01AA 2C                  636 	inc	l
   01AB 2C                  637 	inc	l
   01AC 2C                  638 	inc	l
   01AD 2C                  639 	inc	l
   01AE 18 36               640 	jr	nextscan
                            641 ;	manualy test bits 0-4
   01B0                     642 	testbits:
   01B0 CB 47               643 	bit	0,a
   01B2 CCrD0s01            644 	call	z,keydown
   01B5 2C                  645 	inc	l
   01B6 CB 4F               646 	bit	1,a
   01B8 CCrD0s01            647 	call	z,keydown
   01BB 2C                  648 	inc	l
   01BC CB 57               649 	bit	2,a
   01BE CCrD0s01            650 	call	z,keydown
   01C1 2C                  651 	inc	l
   01C2 CB 5F               652 	bit	3,a
   01C4 CCrD0s01            653 	call	z,keydown
   01C7 2C                  654 	inc	l
   01C8 CB 67               655 	bit	4,a
   01CA CCrD0s01            656 	call	z,keydown
   01CD 2C                  657 	inc	l
   01CE 18 16               658 	jr	nextscan
                            659 ;	store keys to d and e
   01D0                     660 	keydown:
   01D0 08                  661 	ex	af,af'			; alternate accu.
   01D1 7A                  662 	ld	a,d ; d already contains key?
   01D2 FE 00               663 	cp	#0
   01D4 20 03               664 	jr	nz,keytoe
   01D6 55                  665 	ld	d,l
   01D7 18 0B               666 	jr	endofscan
   01D9                     667 	keytoe:
   01D9 7B                  668 	ld	a,e
   01DA FE 00               669 	cp	#0
   01DC 20 03               670 	jr	nz,ghosting
   01DE 5D                  671 	ld	e,l
   01DF 18 03               672 	jr	endofscan
   01E1                     673 	ghosting:
   01E1 11 00 00            674 	ld	de,#0x0000 ; reset de
   01E4                     675 	endofscan:
   01E4 08                  676 	ex	af,af'			; restore a to in a,(c) result
   01E5 C9                  677 	ret
                            678 ;	cont with scan
   01E6                     679 	nextscan:
   01E6 78                  680 	ld	a,b
   01E7 37                  681 	scf	; carry flag on
   01E8 17                  682 	rla	; next line
   01E9 47                  683 	ld	b,a
   01EA FE FF               684 	cp	#0xff ; the end?
   01EC 20 B3               685 	jr	nz, scanline
   01EE                     686 	kbd_process:
   01EE 7A                  687 	ld	a,d
   01EF BB                  688 	cp	e
   01F0 28 61               689 	jr	z,nokeys ; no keys to process, de=0
   01F2 7A                  690 	ld	a,d ; get first key
   01F3 3D                  691 	dec	a ; minus 1 to get offset
   01F4 FE 00               692 	cp	#0x00 ; caps shift?
   01F6 28 10               693 	jr	z,caps
   01F8 FE 24               694 	cp	#0x24 ; symbol shift?
   01FA 28 16               695 	jr	z,sym_
   01FC 7B                  696 	ld	a,e ; check symbol again
   01FD 3D                  697 	dec	a
   01FE FE 24               698 	cp	#0x24 ; second key could be symbol?
   0200 28 17               699 	jr	z,symbole
   0202 7A                  700 	ld	a,d
   0203 21r25s00            701 	ld	hl,#_kbd_map
   0206 18 17               702 	jr	prockey
   0208                     703 	caps:
   0208 7B                  704 	ld	a,e
   0209 FE 00               705 	cp	#0 ; is there another key?
   020B 28 4E               706 	jr	z,keyprocend
   020D 21r4Ds00            707 	ld	hl,#_caps_kbd_map
   0210 18 0D               708 	jr	prockey
   0212                     709 	sym_:
   0212 7B                  710 	ld	a,e
   0213 FE 00               711 	cp	#0
   0215 28 44               712 	jr	z,keyprocend
   0217 18 01               713 	jr	gosymbol
   0219                     714 	symbole:
   0219 7A                  715 	ld	a,d ; d is key and we know it is not 0
   021A                     716 	gosymbol:
   021A 21r75s00            717 	ld	hl,#_sym_kbd_map
   021D 18 00               718 	jr	prockey
   021F                     719 	prockey:
   021F 3D                  720 	dec	a
   0220 16 00               721 	ld	d,#0 ; get to key code
   0222 5F                  722 	ld	e,a
   0223 19                  723 	add	hl,de
   0224 7E                  724 	ld	a,(hl) ; a now has key code
   0225 FD 21r24s00         725 	ld	iy,#_kbd_lastkey
   0229 57                  726 	ld	d,a
   022A FD 7E 00            727 	ld	a,(iy)
   022D BA                  728 	cp	d
   022E 28 2B               729 	jr	z,keyprocend ; key is the same as previous...
   0230 7A                  730 	ld	a,d
   0231 FD 77 00            731 	ld	(iy),a ; store new key code to previous
   0234 47                  732 	ld	b,a ; store key code
   0235 FD 21r23s00         733 	ld	iy,#_kbd_buff_tail
   0239 FD 7E 00            734 	ld	a,(iy) ; get end buffer
   023C 16 00               735 	ld	d,#0
   023E 5F                  736 	ld	e,a
   023F 21r02s00            737 	ld	hl,#_kbd_buffer
   0242 19                  738 	add	hl,de ; hl points to kbd buffer
   0243 3C                  739 	inc	a ; increase end of buffer
   0244 FE 20               740 	cp	#32 ; end of buffer?
   0246 28 02               741 	jr	z,resetbend
   0248 18 02               742 	jr	updatebend
   024A                     743 	resetbend:
   024A 3E 00               744 	ld	a,#0 ; buffer overflow
   024C                     745 	updatebend:
   024C FD 77 00            746 	ld	(iy),a ; write to _kbdbend
   024F 78                  747 	ld	a,b ; restore key code and...
   0250 77                  748 	ld	(hl),a ; ...insert to kbd buffer
   0251 18 08               749 	jr	keyprocend
   0253                     750 	nokeys:
   0253 FD 21r24s00         751 	ld	iy,#_kbd_lastkey
   0257 FD 36 00 00         752 	ld	(iy),#0x00 ; clear previous key
   025B                     753 	keyprocend:
   025B EB                  754 	ex	de,hl ; result from de to hl
   025C C9                  755 	ret
   025D C9                  756 	ret
   025E                     757 _kbd_scan_end::
                            758 	.area _CODE
                            759 	.area _CABS
