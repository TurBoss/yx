                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.1.0 #7066 (Jun 14 2012) (Linux)
                              4 ; This file was generated Tue Nov 27 20:21:22 2012
                              5 ;--------------------------------------------------------
                              6 	.module memory
                              7 	.optsdcc -mz80
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _mem_init
                             13 	.globl _merge_with_next
                             14 	.globl _split
                             15 	.globl _brk
                             16 	.globl _sbrk
                             17 	.globl _find_block
                             18 	.globl _get_heap
                             19 	.globl _mem_last
                             20 	.globl _mem_first
                             21 	.globl _brk_addr
                             22 	.globl _mem_allocate
                             23 	.globl _mem_free
                             24 ;--------------------------------------------------------
                             25 ; special function registers
                             26 ;--------------------------------------------------------
                             27 ;--------------------------------------------------------
                             28 ;  ram data
                             29 ;--------------------------------------------------------
                             30 	.area _DATA
   0000                      31 _brk_addr::
   0000                      32 	.ds 2
   0002                      33 _mem_first::
   0002                      34 	.ds 2
   0004                      35 _mem_last::
   0004                      36 	.ds 2
                             37 ;--------------------------------------------------------
                             38 ; overlayable items in  ram 
                             39 ;--------------------------------------------------------
                             40 	.area _OVERLAY
                             41 ;--------------------------------------------------------
                             42 ; external initialized ram data
                             43 ;--------------------------------------------------------
                             44 ;--------------------------------------------------------
                             45 ; global & static initialisations
                             46 ;--------------------------------------------------------
                             47 	.area _HOME
                             48 	.area _GSINIT
                             49 	.area _GSFINAL
                             50 	.area _GSINIT
                             51 ;memory.c:15: block_t *mem_first=NULL;
   0000 FD 21r02s00          52 	ld	iy,#_mem_first
   0004 FD 36 00 00          53 	ld	0 (iy),#0x00
   0008 FD 36 01 00          54 	ld	1 (iy),#0x00
                             55 ;memory.c:16: block_t *mem_last=NULL;
   000C FD 21r04s00          56 	ld	iy,#_mem_last
   0010 FD 36 00 00          57 	ld	0 (iy),#0x00
   0014 FD 36 01 00          58 	ld	1 (iy),#0x00
                             59 ;--------------------------------------------------------
                             60 ; Home
                             61 ;--------------------------------------------------------
                             62 	.area _HOME
                             63 	.area _HOME
                             64 ;--------------------------------------------------------
                             65 ; code
                             66 ;--------------------------------------------------------
                             67 	.area _CODE
                             68 ;memory.c:21: block_t *find_block(word size) {
                             69 ;	---------------------------------
                             70 ; Function find_block
                             71 ; ---------------------------------
   0000                      72 _find_block_start::
   0000                      73 _find_block:
   0000 DD E5                74 	push	ix
   0002 DD 21 00 00          75 	ld	ix,#0
   0006 DD 39                76 	add	ix,sp
                             77 ;memory.c:23: if (mem_first==NULL) /* virgin heap */
   0008 FD 21r02s00          78 	ld	iy,#_mem_first
   000C FD 7E 01             79 	ld	a,1 (iy)
   000F FD B6 00             80 	or	a,0 (iy)
   0012 20 05                81 	jr	NZ,00107$
                             82 ;memory.c:24: return NULL;
   0014 21 00 00             83 	ld	hl,#0x0000
   0017 18 2B                84 	jr	00109$
   0019                      85 00107$:
                             86 ;memory.c:26: b=mem_first;
   0019 ED 5Br02s00          87 	ld	de,(_mem_first)
                             88 ;memory.c:27: while (b && !(b->owner==NULL && b->size >= size ))
   001D                      89 00103$:
   001D 7A                   90 	ld	a,d
   001E B3                   91 	or	a,e
   001F 28 22                92 	jr	Z,00108$
   0021 6B                   93 	ld	l,e
   0022 62                   94 	ld	h,d
   0023 46                   95 	ld	b,(hl)
   0024 23                   96 	inc	hl
   0025 7E                   97 	ld	a, (hl)
   0026 B0                   98 	or	a,b
   0027 20 11                99 	jr	NZ,00104$
   0029 6B                  100 	ld	l,e
   002A 62                  101 	ld	h,d
   002B 23                  102 	inc	hl
   002C 23                  103 	inc	hl
   002D 46                  104 	ld	b,(hl)
   002E 23                  105 	inc	hl
   002F 66                  106 	ld	h,(hl)
   0030 78                  107 	ld	a,b
   0031 DD 96 04            108 	sub	a, 4 (ix)
   0034 7C                  109 	ld	a,h
   0035 DD 9E 05            110 	sbc	a, 5 (ix)
   0038 30 09               111 	jr	NC,00108$
   003A                     112 00104$:
                            113 ;memory.c:28: b = b->next;
   003A 21 04 00            114 	ld	hl,#0x0004
   003D 19                  115 	add	hl,de
   003E 5E                  116 	ld	e,(hl)
   003F 23                  117 	inc	hl
   0040 56                  118 	ld	d,(hl)
   0041 18 DA               119 	jr	00103$
   0043                     120 00108$:
                            121 ;memory.c:30: return b;
   0043 EB                  122 	ex	de,hl
   0044                     123 00109$:
   0044 DD E1               124 	pop	ix
   0046 C9                  125 	ret
   0047                     126 _find_block_end::
                            127 ;memory.c:33: void * sbrk (word incr) {
                            128 ;	---------------------------------
                            129 ; Function sbrk
                            130 ; ---------------------------------
   0047                     131 _sbrk_start::
   0047                     132 _sbrk:
   0047 DD E5               133 	push	ix
   0049 DD 21 00 00         134 	ld	ix,#0
   004D DD 39               135 	add	ix,sp
                            136 ;memory.c:34: word old_brk=brk_addr;
   004F ED 5Br00s00         137 	ld	de,(_brk_addr)
                            138 ;memory.c:35: if (0xffff - brk_addr < incr )
   0053 21r00s00            139 	ld	hl,#_brk_addr
   0056 3E FF               140 	ld	a,#0xFF
   0058 96                  141 	sub	a, (hl)
   0059 47                  142 	ld	b,a
   005A 3E FF               143 	ld	a,#0xFF
   005C 23                  144 	inc	hl
   005D 9E                  145 	sbc	a, (hl)
   005E 4F                  146 	ld	c,a
   005F 78                  147 	ld	a,b
   0060 DD 96 04            148 	sub	a, 4 (ix)
   0063 79                  149 	ld	a,c
   0064 DD 9E 05            150 	sbc	a, 5 (ix)
   0067 30 05               151 	jr	NC,00102$
                            152 ;memory.c:36: return NULL; /* safe value for zx spectrum, but not standard! */
   0069 21 00 00            153 	ld	hl,#0x0000
   006C 18 0F               154 	jr	00104$
   006E                     155 00102$:
                            156 ;memory.c:38: brk_addr += incr;
   006E 21r00s00            157 	ld	hl,#_brk_addr
   0071 7E                  158 	ld	a,(hl)
   0072 DD 86 04            159 	add	a, 4 (ix)
   0075 77                  160 	ld	(hl),a
   0076 23                  161 	inc	hl
   0077 7E                  162 	ld	a,(hl)
   0078 DD 8E 05            163 	adc	a, 5 (ix)
   007B 77                  164 	ld	(hl),a
                            165 ;memory.c:39: return (void *)old_brk;
   007C EB                  166 	ex	de,hl
   007D                     167 00104$:
   007D DD E1               168 	pop	ix
   007F C9                  169 	ret
   0080                     170 _sbrk_end::
                            171 ;memory.c:43: void brk(void *addr) {
                            172 ;	---------------------------------
                            173 ; Function brk
                            174 ; ---------------------------------
   0080                     175 _brk_start::
   0080                     176 _brk:
   0080 DD E5               177 	push	ix
   0082 DD 21 00 00         178 	ld	ix,#0
   0086 DD 39               179 	add	ix,sp
                            180 ;memory.c:44: brk_addr=(word)addr;
   0088 DD 7E 04            181 	ld	a,4 (ix)
   008B FD 21r00s00         182 	ld	iy,#_brk_addr
   008F FD 77 00            183 	ld	0 (iy),a
   0092 DD 7E 05            184 	ld	a,5 (ix)
   0095 FD 77 01            185 	ld	1 (iy),a
   0098 DD E1               186 	pop	ix
   009A C9                  187 	ret
   009B                     188 _brk_end::
                            189 ;memory.c:47: void split ( block_t *b, word size) {
                            190 ;	---------------------------------
                            191 ; Function split
                            192 ; ---------------------------------
   009B                     193 _split_start::
   009B                     194 _split:
   009B DD E5               195 	push	ix
   009D DD 21 00 00         196 	ld	ix,#0
   00A1 DD 39               197 	add	ix,sp
   00A3 21 FA FF            198 	ld	hl,#-6
   00A6 39                  199 	add	hl,sp
   00A7 F9                  200 	ld	sp,hl
                            201 ;memory.c:50: new = (word) b->data + (word) size;
   00A8 DD 5E 04            202 	ld	e,4 (ix)
   00AB DD 56 05            203 	ld	d,5 (ix)
   00AE 21 08 00            204 	ld	hl,#0x0008
   00B1 19                  205 	add	hl,de
   00B2 4D                  206 	ld	c,l
   00B3 44                  207 	ld	b,h
   00B4 DD 7E 06            208 	ld	a,6 (ix)
   00B7 81                  209 	add	a, c
   00B8 4F                  210 	ld	c,a
   00B9 DD 7E 07            211 	ld	a,7 (ix)
   00BC 88                  212 	adc	a, b
   00BD 47                  213 	ld	b,a
                            214 ;memory.c:51: new->owner=NULL;
   00BE 69                  215 	ld	l,c
   00BF 60                  216 	ld	h,b
   00C0 AF                  217 	xor	a, a
   00C1 77                  218 	ld	(hl), a
   00C2 23                  219 	inc	hl
   00C3 77                  220 	ld	(hl), a
                            221 ;memory.c:52: new->size = b->size - (size + BLK_SIZE);
   00C4 C5                  222 	push	bc
   00C5 FD E1               223 	pop	iy
   00C7 FD 23               224 	inc	iy
   00C9 FD 23               225 	inc	iy
   00CB 21 02 00            226 	ld	hl,#0x0002
   00CE 19                  227 	add	hl,de
   00CF DD 75 FE            228 	ld	-2 (ix),l
   00D2 DD 74 FF            229 	ld	-1 (ix),h
   00D5 7E                  230 	ld	a,(hl)
   00D6 DD 77 FC            231 	ld	-4 (ix),a
   00D9 23                  232 	inc	hl
   00DA 7E                  233 	ld	a,(hl)
   00DB DD 77 FD            234 	ld	-3 (ix),a
   00DE DD 7E 06            235 	ld	a,6 (ix)
   00E1 C6 08               236 	add	a, #0x08
   00E3 DD 77 FA            237 	ld	-6 (ix),a
   00E6 DD 7E 07            238 	ld	a,7 (ix)
   00E9 CE 00               239 	adc	a, #0x00
   00EB DD 77 FB            240 	ld	-5 (ix),a
   00EE DD 7E FC            241 	ld	a,-4 (ix)
   00F1 DD 96 FA            242 	sub	a, -6 (ix)
   00F4 DD 77 FA            243 	ld	-6 (ix),a
   00F7 DD 7E FD            244 	ld	a,-3 (ix)
   00FA DD 9E FB            245 	sbc	a, -5 (ix)
   00FD DD 77 FB            246 	ld	-5 (ix),a
   0100 DD 7E FA            247 	ld	a,-6 (ix)
   0103 FD 77 00            248 	ld	0 (iy),a
   0106 DD 7E FB            249 	ld	a,-5 (ix)
   0109 FD 77 01            250 	ld	1 (iy),a
                            251 ;memory.c:53: new->next = b->next;
   010C FD 21 04 00         252 	ld	iy,#0x0004
   0110 FD 09               253 	add	iy, bc
   0112 21 04 00            254 	ld	hl,#0x0004
   0115 19                  255 	add	hl,de
   0116 DD 75 FA            256 	ld	-6 (ix),l
   0119 DD 74 FB            257 	ld	-5 (ix),h
   011C 7E                  258 	ld	a,(hl)
   011D DD 77 FC            259 	ld	-4 (ix),a
   0120 23                  260 	inc	hl
   0121 7E                  261 	ld	a,(hl)
   0122 DD 77 FD            262 	ld	-3 (ix),a
   0125 DD 7E FC            263 	ld	a,-4 (ix)
   0128 FD 77 00            264 	ld	0 (iy),a
   012B DD 7E FD            265 	ld	a,-3 (ix)
   012E FD 77 01            266 	ld	1 (iy),a
                            267 ;memory.c:54: new->prev=b;
   0131 21 06 00            268 	ld	hl,#0x0006
   0134 09                  269 	add	hl,bc
   0135 73                  270 	ld	(hl),e
   0136 23                  271 	inc	hl
   0137 72                  272 	ld	(hl),d
                            273 ;memory.c:56: b->size = size;
   0138 DD 6E FE            274 	ld	l,-2 (ix)
   013B DD 66 FF            275 	ld	h,-1 (ix)
   013E DD 7E 06            276 	ld	a,6 (ix)
   0141 77                  277 	ld	(hl),a
   0142 23                  278 	inc	hl
   0143 DD 7E 07            279 	ld	a,7 (ix)
   0146 77                  280 	ld	(hl),a
                            281 ;memory.c:57: if (b->next) 
   0147 DD 7E FD            282 	ld	a,-3 (ix)
   014A DD B6 FC            283 	or	a,-4 (ix)
   014D 28 11               284 	jr	Z,00102$
                            285 ;memory.c:58: b->next->prev=new;
   014F DD 7E FC            286 	ld	a,-4 (ix)
   0152 C6 06               287 	add	a, #0x06
   0154 6F                  288 	ld	l,a
   0155 DD 7E FD            289 	ld	a,-3 (ix)
   0158 CE 00               290 	adc	a, #0x00
   015A 67                  291 	ld	h,a
   015B 71                  292 	ld	(hl),c
   015C 23                  293 	inc	hl
   015D 70                  294 	ld	(hl),b
   015E 18 0A               295 	jr	00103$
   0160                     296 00102$:
                            297 ;memory.c:60: mem_last=new;
   0160 FD 21r04s00         298 	ld	iy,#_mem_last
   0164 FD 71 00            299 	ld	0 (iy),c
   0167 FD 70 01            300 	ld	1 (iy),b
   016A                     301 00103$:
                            302 ;memory.c:61: b->next = new;
   016A DD 6E FA            303 	ld	l,-6 (ix)
   016D DD 66 FB            304 	ld	h,-5 (ix)
   0170 71                  305 	ld	(hl),c
   0171 23                  306 	inc	hl
   0172 70                  307 	ld	(hl),b
   0173 DD F9               308 	ld	sp,ix
   0175 DD E1               309 	pop	ix
   0177 C9                  310 	ret
   0178                     311 _split_end::
                            312 ;memory.c:64: block_t * merge_with_next ( block_t *b ) {
                            313 ;	---------------------------------
                            314 ; Function merge_with_next
                            315 ; ---------------------------------
   0178                     316 _merge_with_next_start::
   0178                     317 _merge_with_next:
   0178 DD E5               318 	push	ix
   017A DD 21 00 00         319 	ld	ix,#0
   017E DD 39               320 	add	ix,sp
   0180 F5                  321 	push	af
   0181 F5                  322 	push	af
                            323 ;memory.c:66: b->size += ( BLK_SIZE + b->next->size );
   0182 DD 4E 04            324 	ld	c,4 (ix)
   0185 DD 46 05            325 	ld	b,5 (ix)
   0188 21 02 00            326 	ld	hl,#0x0002
   018B 09                  327 	add	hl,bc
   018C DD 75 FE            328 	ld	-2 (ix),l
   018F DD 74 FF            329 	ld	-1 (ix),h
   0192 5E                  330 	ld	e,(hl)
   0193 23                  331 	inc	hl
   0194 56                  332 	ld	d,(hl)
   0195 FD 21 04 00         333 	ld	iy,#0x0004
   0199 FD 09               334 	add	iy, bc
   019B FD 7E 00            335 	ld	a,0 (iy)
   019E DD 77 FC            336 	ld	-4 (ix),a
   01A1 FD 7E 01            337 	ld	a,1 (iy)
   01A4 DD 77 FD            338 	ld	-3 (ix),a
   01A7 DD 6E FC            339 	ld	l,-4 (ix)
   01AA DD 66 FD            340 	ld	h,-3 (ix)
   01AD 23                  341 	inc	hl
   01AE 23                  342 	inc	hl
   01AF 7E                  343 	ld	a,(hl)
   01B0 23                  344 	inc	hl
   01B1 66                  345 	ld	h,(hl)
   01B2 C6 08               346 	add	a, #0x08
   01B4 6F                  347 	ld	l,a
   01B5 7C                  348 	ld	a,h
   01B6 CE 00               349 	adc	a, #0x00
   01B8 67                  350 	ld	h,a
   01B9 19                  351 	add	hl,de
   01BA EB                  352 	ex	de,hl
   01BB DD 6E FE            353 	ld	l,-2 (ix)
   01BE DD 66 FF            354 	ld	h,-1 (ix)
   01C1 73                  355 	ld	(hl),e
   01C2 23                  356 	inc	hl
   01C3 72                  357 	ld	(hl),d
                            358 ;memory.c:67: b->next = b->next->next;
   01C4 DD 7E FC            359 	ld	a,-4 (ix)
   01C7 C6 04               360 	add	a, #0x04
   01C9 6F                  361 	ld	l,a
   01CA DD 7E FD            362 	ld	a,-3 (ix)
   01CD CE 00               363 	adc	a, #0x00
   01CF 67                  364 	ld	h,a
   01D0 5E                  365 	ld	e,(hl)
   01D1 23                  366 	inc	hl
   01D2 56                  367 	ld	d,(hl)
   01D3 FD 73 00            368 	ld	0 (iy),e
   01D6 FD 72 01            369 	ld	1 (iy),d
                            370 ;memory.c:68: if (b->next)
   01D9 FD 6E 00            371 	ld	l,0 (iy)
   01DC FD 66 01            372 	ld	h,1 (iy)
   01DF 7A                  373 	ld	a,d
   01E0 B3                  374 	or	a,e
   01E1 28 09               375 	jr	Z,00102$
                            376 ;memory.c:69: b->next->prev=b;
   01E3 11 06 00            377 	ld	de,#0x0006
   01E6 19                  378 	add	hl,de
   01E7 71                  379 	ld	(hl),c
   01E8 23                  380 	inc	hl
   01E9 70                  381 	ld	(hl),b
   01EA 18 0A               382 	jr	00103$
   01EC                     383 00102$:
                            384 ;memory.c:71: mem_last=b;
   01EC FD 21r04s00         385 	ld	iy,#_mem_last
   01F0 FD 71 00            386 	ld	0 (iy),c
   01F3 FD 70 01            387 	ld	1 (iy),b
   01F6                     388 00103$:
                            389 ;memory.c:73: return b;
   01F6 69                  390 	ld	l,c
   01F7 60                  391 	ld	h,b
   01F8 DD F9               392 	ld	sp,ix
   01FA DD E1               393 	pop	ix
   01FC C9                  394 	ret
   01FD                     395 _merge_with_next_end::
                            396 ;memory.c:84: void mem_init() {
                            397 ;	---------------------------------
                            398 ; Function mem_init
                            399 ; ---------------------------------
   01FD                     400 _mem_init_start::
   01FD                     401 _mem_init:
                            402 ;memory.c:85: brk_addr=get_heap();
   01FD CDr00s00            403 	call	_get_heap
   0200 FD 21r00s00         404 	ld	iy,#_brk_addr
   0204 FD 75 00            405 	ld	0 (iy),l
   0207 FD 74 01            406 	ld	1 (iy),h
   020A C9                  407 	ret
   020B                     408 _mem_init_end::
                            409 ;memory.c:91: void *mem_allocate(word size, word owner) {
                            410 ;	---------------------------------
                            411 ; Function mem_allocate
                            412 ; ---------------------------------
   020B                     413 _mem_allocate_start::
   020B                     414 _mem_allocate:
   020B DD E5               415 	push	ix
   020D DD 21 00 00         416 	ld	ix,#0
   0211 DD 39               417 	add	ix,sp
                            418 ;memory.c:93: if (!mem_first) {
   0213 FD 21r02s00         419 	ld	iy,#_mem_first
   0217 FD 7E 01            420 	ld	a,1 (iy)
   021A FD B6 00            421 	or	a,0 (iy)
   021D 20 59               422 	jr	NZ,00107$
                            423 ;memory.c:94: mem_first = mem_last = b = (block_t *)sbrk(size + BLK_SIZE);
   021F DD 7E 04            424 	ld	a,4 (ix)
   0222 C6 08               425 	add	a, #0x08
   0224 5F                  426 	ld	e,a
   0225 DD 7E 05            427 	ld	a,5 (ix)
   0228 CE 00               428 	adc	a, #0x00
   022A 57                  429 	ld	d,a
   022B D5                  430 	push	de
   022C CDr47s00            431 	call	_sbrk
   022F F1                  432 	pop	af
   0230 EB                  433 	ex	de,hl
   0231 4B                  434 	ld	c,e
   0232 42                  435 	ld	b,d
   0233 FD 21r04s00         436 	ld	iy,#_mem_last
   0237 FD 73 00            437 	ld	0 (iy),e
   023A FD 72 01            438 	ld	1 (iy),d
   023D FD 21r02s00         439 	ld	iy,#_mem_first
   0241 FD 73 00            440 	ld	0 (iy),e
   0244 FD 72 01            441 	ld	1 (iy),d
                            442 ;memory.c:95: b->prev=b->next=NULL;
   0247 FD 21 06 00         443 	ld	iy,#0x0006
   024B FD 09               444 	add	iy, bc
   024D 21 04 00            445 	ld	hl,#0x0004
   0250 09                  446 	add	hl,bc
   0251 AF                  447 	xor	a, a
   0252 77                  448 	ld	(hl), a
   0253 23                  449 	inc	hl
   0254 77                  450 	ld	(hl), a
   0255 FD 36 00 00         451 	ld	0 (iy),#0x00
   0259 FD 36 01 00         452 	ld	1 (iy),#0x00
                            453 ;memory.c:96: b->owner=owner;		
   025D DD 56 06            454 	ld	d,6 (ix)
   0260 DD 5E 07            455 	ld	e,7 (ix)
   0263 69                  456 	ld	l,c
   0264 60                  457 	ld	h,b
   0265 72                  458 	ld	(hl),d
   0266 23                  459 	inc	hl
   0267 73                  460 	ld	(hl),e
                            461 ;memory.c:97: b->size=size;
   0268 69                  462 	ld	l,c
   0269 60                  463 	ld	h,b
   026A 23                  464 	inc	hl
   026B 23                  465 	inc	hl
   026C DD 7E 04            466 	ld	a,4 (ix)
   026F 77                  467 	ld	(hl),a
   0270 23                  468 	inc	hl
   0271 DD 7E 05            469 	ld	a,5 (ix)
   0274 77                  470 	ld	(hl),a
   0275 C3r08s03            471 	jp	00108$
   0278                     472 00107$:
                            473 ;memory.c:99: b=find_block(size);
   0278 DD 6E 04            474 	ld	l,4 (ix)
   027B DD 66 05            475 	ld	h,5 (ix)
   027E E5                  476 	push	hl
   027F CDr00s00            477 	call	_find_block
   0282 F1                  478 	pop	af
   0283 4D                  479 	ld	c,l
   0284 44                  480 	ld	b,h
                            481 ;memory.c:100: if (b) {
   0285 78                  482 	ld	a,b
   0286 B1                  483 	or	a,c
   0287 28 2B               484 	jr	Z,00104$
                            485 ;memory.c:101: if (b->size > BLK_SIZE + MIN_CHUNK_SIZE)
   0289 69                  486 	ld	l,c
   028A 60                  487 	ld	h,b
   028B 23                  488 	inc	hl
   028C 23                  489 	inc	hl
   028D 56                  490 	ld	d,(hl)
   028E 23                  491 	inc	hl
   028F 66                  492 	ld	h,(hl)
   0290 3E 0C               493 	ld	a,#0x0C
   0292 92                  494 	sub	a, d
   0293 3E 00               495 	ld	a,#0x00
   0295 9C                  496 	sbc	a, h
   0296 30 0F               497 	jr	NC,00102$
                            498 ;memory.c:102: split(b, size);
   0298 C5                  499 	push	bc
   0299 DD 6E 04            500 	ld	l,4 (ix)
   029C DD 66 05            501 	ld	h,5 (ix)
   029F E5                  502 	push	hl
   02A0 C5                  503 	push	bc
   02A1 CDr9Bs00            504 	call	_split
   02A4 F1                  505 	pop	af
   02A5 F1                  506 	pop	af
   02A6 C1                  507 	pop	bc
   02A7                     508 00102$:
                            509 ;memory.c:103: b->owner=owner;
   02A7 DD 56 06            510 	ld	d,6 (ix)
   02AA DD 5E 07            511 	ld	e,7 (ix)
   02AD 69                  512 	ld	l,c
   02AE 60                  513 	ld	h,b
   02AF 72                  514 	ld	(hl),d
   02B0 23                  515 	inc	hl
   02B1 73                  516 	ld	(hl),e
   02B2 18 54               517 	jr	00108$
   02B4                     518 00104$:
                            519 ;memory.c:105: b = (block_t *)sbrk(size + BLK_SIZE);
   02B4 DD 7E 04            520 	ld	a,4 (ix)
   02B7 C6 08               521 	add	a, #0x08
   02B9 5F                  522 	ld	e,a
   02BA DD 7E 05            523 	ld	a,5 (ix)
   02BD CE 00               524 	adc	a, #0x00
   02BF 57                  525 	ld	d,a
   02C0 D5                  526 	push	de
   02C1 CDr47s00            527 	call	_sbrk
   02C4 F1                  528 	pop	af
   02C5 4D                  529 	ld	c,l
   02C6 44                  530 	ld	b,h
                            531 ;memory.c:106: mem_last->next=b;
   02C7 2Ar04s00            532 	ld	hl,(_mem_last)
   02CA 11 04 00            533 	ld	de,#0x0004
   02CD 19                  534 	add	hl,de
   02CE 71                  535 	ld	(hl),c
   02CF 23                  536 	inc	hl
   02D0 70                  537 	ld	(hl),b
                            538 ;memory.c:107: b->prev=mem_last;
   02D1 21 06 00            539 	ld	hl,#0x0006
   02D4 09                  540 	add	hl,bc
   02D5 FD 21r04s00         541 	ld	iy,#_mem_last
   02D9 FD 7E 00            542 	ld	a,0 (iy)
   02DC 77                  543 	ld	(hl),a
   02DD 23                  544 	inc	hl
   02DE FD 7E 01            545 	ld	a,1 (iy)
   02E1 77                  546 	ld	(hl),a
                            547 ;memory.c:108: b->owner=owner;
   02E2 DD 56 06            548 	ld	d,6 (ix)
   02E5 DD 5E 07            549 	ld	e,7 (ix)
   02E8 69                  550 	ld	l,c
   02E9 60                  551 	ld	h,b
   02EA 72                  552 	ld	(hl),d
   02EB 23                  553 	inc	hl
   02EC 73                  554 	ld	(hl),e
                            555 ;memory.c:109: b->size=size;
   02ED 69                  556 	ld	l,c
   02EE 60                  557 	ld	h,b
   02EF 23                  558 	inc	hl
   02F0 23                  559 	inc	hl
   02F1 DD 7E 04            560 	ld	a,4 (ix)
   02F4 77                  561 	ld	(hl),a
   02F5 23                  562 	inc	hl
   02F6 DD 7E 05            563 	ld	a,5 (ix)
   02F9 77                  564 	ld	(hl),a
                            565 ;memory.c:110: b->next=NULL;
   02FA 21 04 00            566 	ld	hl,#0x0004
   02FD 09                  567 	add	hl,bc
   02FE AF                  568 	xor	a, a
   02FF 77                  569 	ld	(hl), a
   0300 23                  570 	inc	hl
   0301 77                  571 	ld	(hl), a
                            572 ;memory.c:111: mem_last=b;
   0302 FD 71 00            573 	ld	0 (iy),c
   0305 FD 70 01            574 	ld	1 (iy),b
   0308                     575 00108$:
                            576 ;memory.c:114: if (!b)
   0308 78                  577 	ld	a,b
   0309 B1                  578 	or	a,c
   030A 20 05               579 	jr	NZ,00110$
                            580 ;memory.c:115: return NULL;
   030C 21 00 00            581 	ld	hl,#0x0000
   030F 18 04               582 	jr	00112$
   0311                     583 00110$:
                            584 ;memory.c:117: return (void *)(b->data);
   0311 21 08 00            585 	ld	hl,#0x0008
   0314 09                  586 	add	hl,bc
   0315                     587 00112$:
   0315 DD E1               588 	pop	ix
   0317 C9                  589 	ret
   0318                     590 _mem_allocate_end::
                            591 ;memory.c:123: void mem_free(void *p) {
                            592 ;	---------------------------------
                            593 ; Function mem_free
                            594 ; ---------------------------------
   0318                     595 _mem_free_start::
   0318                     596 _mem_free:
   0318 DD E5               597 	push	ix
   031A DD 21 00 00         598 	ld	ix,#0
   031E DD 39               599 	add	ix,sp
                            600 ;memory.c:129: baddr=(word)p;
                            601 ;memory.c:130: baddr-=BLK_SIZE;
   0320 DD 7E 04            602 	ld	a, 4 (ix)
   0323 DD 46 05            603 	ld	b, 5 (ix)
   0326 C6 F8               604 	add	a,#0xF8
   0328 4F                  605 	ld	c,a
   0329 78                  606 	ld	a,b
   032A CE FF               607 	adc	a,#0xFF
   032C 47                  608 	ld	b,a
                            609 ;memory.c:131: b=baddr;
                            610 ;memory.c:133: b->owner=NULL; /* release block */
   032D 69                  611 	ld	l,c
   032E 60                  612 	ld	h,b
   032F AF                  613 	xor	a, a
   0330 77                  614 	ld	(hl), a
   0331 23                  615 	inc	hl
   0332 77                  616 	ld	(hl), a
                            617 ;memory.c:138: if (b->prev && b->prev->owner==NULL) /* try previous */
   0333 21 06 00            618 	ld	hl,#0x0006
   0336 09                  619 	add	hl,bc
   0337 7E                  620 	ld	a,(hl)
   0338 23                  621 	inc	hl
   0339 66                  622 	ld	h,(hl)
   033A 6F                  623 	ld	l,a
   033B B4                  624 	or	a,h
   033C 28 0F               625 	jr	Z,00102$
   033E 56                  626 	ld	d,(hl)
   033F 23                  627 	inc	hl
   0340 5E                  628 	ld	e,(hl)
   0341 2B                  629 	dec	hl
   0342 7B                  630 	ld	a,e
   0343 B2                  631 	or	a,d
   0344 20 07               632 	jr	NZ,00102$
                            633 ;memory.c:139: b = merge_with_next(b->prev);
   0346 E5                  634 	push	hl
   0347 CDr78s01            635 	call	_merge_with_next
   034A F1                  636 	pop	af
   034B 4D                  637 	ld	c,l
   034C 44                  638 	ld	b,h
   034D                     639 00102$:
                            640 ;memory.c:140: if (b->next && b->next->owner==NULL) /* try next */
   034D 21 04 00            641 	ld	hl,#0x0004
   0350 09                  642 	add	hl,bc
   0351 55                  643 	ld	d,l
   0352 5C                  644 	ld	e,h
   0353 7E                  645 	ld	a,(hl)
   0354 23                  646 	inc	hl
   0355 66                  647 	ld	h,(hl)
   0356 6F                  648 	ld	l,a
   0357 B4                  649 	or	a,h
   0358 28 0E               650 	jr	Z,00105$
   035A 7E                  651 	ld	a,(hl)
   035B 23                  652 	inc	hl
   035C B6                  653 	or	a,(hl)
   035D 20 09               654 	jr	NZ,00105$
                            655 ;memory.c:141: merge_with_next(b);
   035F C5                  656 	push	bc
   0360 D5                  657 	push	de
   0361 C5                  658 	push	bc
   0362 CDr78s01            659 	call	_merge_with_next
   0365 F1                  660 	pop	af
   0366 D1                  661 	pop	de
   0367 C1                  662 	pop	bc
   0368                     663 00105$:
                            664 ;memory.c:143: if (b->next==NULL) { /* are we at the end of the heap? */
   0368 6A                  665 	ld	l,d
   0369 63                  666 	ld	h,e
   036A 56                  667 	ld	d,(hl)
   036B 23                  668 	inc	hl
   036C 7E                  669 	ld	a, (hl)
   036D B2                  670 	or	a,d
   036E 20 3C               671 	jr	NZ,00112$
                            672 ;memory.c:144: if (b->prev==NULL) /* mem_first? */
   0370 21 06 00            673 	ld	hl,#0x0006
   0373 09                  674 	add	hl,bc
   0374 5E                  675 	ld	e,(hl)
   0375 23                  676 	inc	hl
   0376 56                  677 	ld	d,(hl)
   0377 7A                  678 	ld	a,d
   0378 B3                  679 	or	a,e
   0379 20 1A               680 	jr	NZ,00108$
                            681 ;memory.c:145: mem_first=mem_last=NULL;
   037B FD 21r04s00         682 	ld	iy,#_mem_last
   037F FD 36 00 00         683 	ld	0 (iy),#0x00
   0383 FD 36 01 00         684 	ld	1 (iy),#0x00
   0387 FD 21r02s00         685 	ld	iy,#_mem_first
   038B FD 36 00 00         686 	ld	0 (iy),#0x00
   038F FD 36 01 00         687 	ld	1 (iy),#0x00
   0393 18 12               688 	jr	00109$
   0395                     689 00108$:
                            690 ;memory.c:147: b->prev->next = NULL;
   0395 21 04 00            691 	ld	hl,#0x0004
   0398 19                  692 	add	hl,de
   0399 AF                  693 	xor	a, a
   039A 77                  694 	ld	(hl), a
   039B 23                  695 	inc	hl
   039C 77                  696 	ld	(hl), a
                            697 ;memory.c:148: mem_last=b->prev;
   039D FD 21r04s00         698 	ld	iy,#_mem_last
   03A1 FD 73 00            699 	ld	0 (iy),e
   03A4 FD 72 01            700 	ld	1 (iy),d
   03A7                     701 00109$:
                            702 ;memory.c:150: brk(b);
   03A7 C5                  703 	push	bc
   03A8 CDr80s00            704 	call	_brk
   03AB F1                  705 	pop	af
   03AC                     706 00112$:
   03AC DD E1               707 	pop	ix
   03AE C9                  708 	ret
   03AF                     709 _mem_free_end::
                            710 	.area _CODE
                            711 	.area _CABS
