                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.1.0 #7066 (Jun 14 2012) (Linux)
                              4 ; This file was generated Tue Nov 27 20:21:22 2012
                              5 ;--------------------------------------------------------
                              6 	.module list
                              7 	.optsdcc -mz80
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _mem_free
                             13 	.globl _mem_allocate
                             14 	.globl _lst_insert
                             15 	.globl _lst_delete
                             16 	.globl _lst_match
                             17 	.globl _lst_find
                             18 ;--------------------------------------------------------
                             19 ; special function registers
                             20 ;--------------------------------------------------------
                             21 ;--------------------------------------------------------
                             22 ;  ram data
                             23 ;--------------------------------------------------------
                             24 	.area _DATA
                             25 ;--------------------------------------------------------
                             26 ; overlayable items in  ram 
                             27 ;--------------------------------------------------------
                             28 	.area _OVERLAY
                             29 ;--------------------------------------------------------
                             30 ; external initialized ram data
                             31 ;--------------------------------------------------------
                             32 ;--------------------------------------------------------
                             33 ; global & static initialisations
                             34 ;--------------------------------------------------------
                             35 	.area _HOME
                             36 	.area _GSINIT
                             37 	.area _GSFINAL
                             38 	.area _GSINIT
                             39 ;--------------------------------------------------------
                             40 ; Home
                             41 ;--------------------------------------------------------
                             42 	.area _HOME
                             43 	.area _HOME
                             44 ;--------------------------------------------------------
                             45 ; code
                             46 ;--------------------------------------------------------
                             47 	.area _CODE
                             48 ;list.c:12: list_header_t* lst_insert(list_header_t** first, word size, void* owner) {
                             49 ;	---------------------------------
                             50 ; Function lst_insert
                             51 ; ---------------------------------
   0000                      52 _lst_insert_start::
   0000                      53 _lst_insert:
   0000 DD E5                54 	push	ix
   0002 DD 21 00 00          55 	ld	ix,#0
   0006 DD 39                56 	add	ix,sp
                             57 ;list.c:13: list_header_t *el=mem_allocate(size, (word)owner);
   0008 DD 6E 08             58 	ld	l,8 (ix)
   000B DD 66 09             59 	ld	h,9 (ix)
   000E E5                   60 	push	hl
   000F DD 6E 06             61 	ld	l,6 (ix)
   0012 DD 66 07             62 	ld	h,7 (ix)
   0015 E5                   63 	push	hl
   0016 CDr00s00             64 	call	_mem_allocate
   0019 F1                   65 	pop	af
   001A F1                   66 	pop	af
   001B EB                   67 	ex	de,hl
                             68 ;list.c:14: if (el==NULL) 
   001C 7A                   69 	ld	a,d
   001D B3                   70 	or	a,e
   001E 20 07                71 	jr	NZ,00102$
                             72 ;list.c:15: last_error=RESULT_NO_MEMORY_LEFT;
   0020 21r00s00             73 	ld	hl,#_last_error + 0
   0023 36 02                74 	ld	(hl), #0x02
   0025 18 2C                75 	jr	00103$
   0027                      76 00102$:
                             77 ;list.c:17: el->next=*first;
   0027 DD 4E 04             78 	ld	c,4 (ix)
   002A DD 46 05             79 	ld	b,5 (ix)
   002D C5                   80 	push	bc
   002E FD E1                81 	pop	iy
   0030 FD 4E 00             82 	ld	c,0 (iy)
   0033 FD 46 01             83 	ld	b,1 (iy)
   0036 6B                   84 	ld	l,e
   0037 62                   85 	ld	h,d
   0038 71                   86 	ld	(hl),c
   0039 23                   87 	inc	hl
   003A 70                   88 	ld	(hl),b
                             89 ;list.c:18: el->owner=owner;
   003B 6B                   90 	ld	l,e
   003C 62                   91 	ld	h,d
   003D 23                   92 	inc	hl
   003E 23                   93 	inc	hl
   003F DD 7E 08             94 	ld	a,8 (ix)
   0042 77                   95 	ld	(hl),a
   0043 23                   96 	inc	hl
   0044 DD 7E 09             97 	ld	a,9 (ix)
   0047 77                   98 	ld	(hl),a
                             99 ;list.c:19: *first=el;
   0048 FD 73 00            100 	ld	0 (iy),e
   004B FD 72 01            101 	ld	1 (iy),d
                            102 ;list.c:20: last_error=RESULT_SUCCESS;
   004E 21r00s00            103 	ld	hl,#_last_error + 0
   0051 36 00               104 	ld	(hl), #0x00
   0053                     105 00103$:
                            106 ;list.c:22: return el;
   0053 EB                  107 	ex	de,hl
   0054 DD E1               108 	pop	ix
   0056 C9                  109 	ret
   0057                     110 _lst_insert_end::
                            111 ;list.c:28: result lst_delete(list_header_t **first, list_header_t *element, byte free) {
                            112 ;	---------------------------------
                            113 ; Function lst_delete
                            114 ; ---------------------------------
   0057                     115 _lst_delete_start::
   0057                     116 _lst_delete:
   0057 DD E5               117 	push	ix
   0059 DD 21 00 00         118 	ld	ix,#0
   005D DD 39               119 	add	ix,sp
                            120 ;list.c:31: if (element==NULL)
   005F DD 7E 07            121 	ld	a,7 (ix)
   0062 DD B6 06            122 	or	a,6 (ix)
   0065 20 0A               123 	jr	NZ,00116$
                            124 ;list.c:32: return last_error=RESULT_INVALID_PARAMETER;
   0067 21r00s00            125 	ld	hl,#_last_error + 0
   006A 36 04               126 	ld	(hl), #0x04
   006C 2E 04               127 	ld	l,#0x04
   006E C3rF6s00            128 	jp	00118$
   0071                     129 00116$:
                            130 ;list.c:33: else if (element==*first) {
   0071 DD 4E 04            131 	ld	c,4 (ix)
   0074 DD 46 05            132 	ld	b,5 (ix)
   0077 69                  133 	ld	l,c
   0078 60                  134 	ld	h,b
   0079 5E                  135 	ld	e,(hl)
   007A 23                  136 	inc	hl
   007B 56                  137 	ld	d,(hl)
   007C DD 7E 06            138 	ld	a,6 (ix)
   007F 93                  139 	sub	a, e
   0080 20 27               140 	jr	NZ,00113$
   0082 DD 7E 07            141 	ld	a,7 (ix)
   0085 92                  142 	sub	a, d
   0086 20 21               143 	jr	NZ,00113$
                            144 ;list.c:34: *first=element->next;
   0088 DD 6E 06            145 	ld	l,6 (ix)
   008B DD 66 07            146 	ld	h,7 (ix)
   008E 5E                  147 	ld	e,(hl)
   008F 23                  148 	inc	hl
   0090 56                  149 	ld	d,(hl)
   0091 69                  150 	ld	l,c
   0092 60                  151 	ld	h,b
   0093 73                  152 	ld	(hl),e
   0094 23                  153 	inc	hl
   0095 72                  154 	ld	(hl),d
                            155 ;list.c:35: if (free) mem_free(element);
   0096 DD 7E 08            156 	ld	a,8 (ix)
   0099 B7                  157 	or	a, a
   009A 28 53               158 	jr	Z,00117$
   009C DD 6E 06            159 	ld	l,6 (ix)
   009F DD 66 07            160 	ld	h,7 (ix)
   00A2 E5                  161 	push	hl
   00A3 CDr00s00            162 	call	_mem_free
   00A6 F1                  163 	pop	af
   00A7 18 46               164 	jr	00117$
   00A9                     165 00113$:
                            166 ;list.c:37: prev=*first;
                            167 ;list.c:38: curr=prev->next;
   00A9 6B                  168 	ld	l,e
   00AA 62                  169 	ld	h,d
   00AB 4E                  170 	ld	c,(hl)
   00AC 23                  171 	inc	hl
   00AD 46                  172 	ld	b,(hl)
                            173 ;list.c:39: while (curr && curr!=element) {
   00AE                     174 00104$:
   00AE 78                  175 	ld	a,b
   00AF B1                  176 	or	a,c
   00B0 28 16               177 	jr	Z,00106$
   00B2 79                  178 	ld	a,c
   00B3 DD 96 06            179 	sub	a, 6 (ix)
   00B6 20 06               180 	jr	NZ,00130$
   00B8 78                  181 	ld	a,b
   00B9 DD 96 07            182 	sub	a, 7 (ix)
   00BC 28 0A               183 	jr	Z,00106$
   00BE                     184 00130$:
                            185 ;list.c:40: prev=curr;
   00BE 59                  186 	ld	e,c
   00BF 50                  187 	ld	d,b
                            188 ;list.c:41: curr=curr->next;
   00C0 69                  189 	ld	l,c
   00C1 60                  190 	ld	h,b
   00C2 7E                  191 	ld	a,(hl)
   00C3 23                  192 	inc	hl
   00C4 46                  193 	ld	b, (hl)
   00C5 4F                  194 	ld	c, a
   00C6 18 E6               195 	jr	00104$
   00C8                     196 00106$:
                            197 ;list.c:43: if (!curr) 
   00C8 78                  198 	ld	a,b
   00C9 B1                  199 	or	a,c
   00CA 20 09               200 	jr	NZ,00110$
                            201 ;list.c:44: return last_error=RESULT_NOT_FOUND;
   00CC 21r00s00            202 	ld	hl,#_last_error + 0
   00CF 36 05               203 	ld	(hl), #0x05
   00D1 2E 05               204 	ld	l,#0x05
   00D3 18 21               205 	jr	00118$
   00D5                     206 00110$:
                            207 ;list.c:46: prev->next=curr->next;
   00D5 69                  208 	ld	l,c
   00D6 60                  209 	ld	h,b
   00D7 4E                  210 	ld	c,(hl)
   00D8 23                  211 	inc	hl
   00D9 46                  212 	ld	b,(hl)
   00DA EB                  213 	ex	de,hl
   00DB 71                  214 	ld	(hl),c
   00DC 23                  215 	inc	hl
   00DD 70                  216 	ld	(hl),b
                            217 ;list.c:47: if (free) mem_free(element);
   00DE DD 7E 08            218 	ld	a,8 (ix)
   00E1 B7                  219 	or	a, a
   00E2 28 0B               220 	jr	Z,00117$
   00E4 DD 6E 06            221 	ld	l,6 (ix)
   00E7 DD 66 07            222 	ld	h,7 (ix)
   00EA E5                  223 	push	hl
   00EB CDr00s00            224 	call	_mem_free
   00EE F1                  225 	pop	af
   00EF                     226 00117$:
                            227 ;list.c:50: return last_error=RESULT_SUCCESS;
   00EF 21r00s00            228 	ld	hl,#_last_error + 0
   00F2 36 00               229 	ld	(hl), #0x00
   00F4 2E 00               230 	ld	l,#0x00
   00F6                     231 00118$:
   00F6 DD E1               232 	pop	ix
   00F8 C9                  233 	ret
   00F9                     234 _lst_delete_end::
                            235 ;list.c:58: list_header_t* lst_match(list_header_t *first, list_header_t **last, byte (*match)(list_header_t *element)) {
                            236 ;	---------------------------------
                            237 ; Function lst_match
                            238 ; ---------------------------------
   00F9                     239 _lst_match_start::
   00F9                     240 _lst_match:
   00F9 DD E5               241 	push	ix
   00FB DD 21 00 00         242 	ld	ix,#0
   00FF DD 39               243 	add	ix,sp
   0101 F5                  244 	push	af
                            245 ;list.c:62: if (first==NULL)
   0102 DD 7E 05            246 	ld	a,5 (ix)
   0105 DD B6 04            247 	or	a,4 (ix)
   0108 20 07               248 	jr	NZ,00109$
                            249 ;list.c:63: last_error=RESULT_NOT_FOUND;
   010A 21r00s00            250 	ld	hl,#_last_error + 0
   010D 36 05               251 	ld	(hl), #0x05
   010F 18 3B               252 	jr	00110$
   0111                     253 00109$:
                            254 ;list.c:65: curr=first;
   0111 DD 5E 04            255 	ld	e,4 (ix)
   0114 DD 56 05            256 	ld	d,5 (ix)
                            257 ;list.c:66: while (curr && !match(curr)) {
   0117                     258 00102$:
   0117 7A                  259 	ld	a,d
   0118 B3                  260 	or	a,e
   0119 28 21               261 	jr	Z,00104$
   011B D5                  262 	push	de
   011C D5                  263 	push	de
   011D DD 6E 08            264 	ld	l,8 (ix)
   0120 DD 66 09            265 	ld	h,9 (ix)
   0123 CDr00s00            266 	call	__sdcc_call_hl
   0126 F1                  267 	pop	af
   0127 7D                  268 	ld	a,l
   0128 D1                  269 	pop	de
   0129 B7                  270 	or	a, a
   012A 20 10               271 	jr	NZ,00104$
                            272 ;list.c:67: *last=curr;
   012C DD 6E 06            273 	ld	l,6 (ix)
   012F DD 66 07            274 	ld	h,7 (ix)
   0132 73                  275 	ld	(hl),e
   0133 23                  276 	inc	hl
   0134 72                  277 	ld	(hl),d
                            278 ;list.c:68: curr=curr->next;
   0135 EB                  279 	ex	de,hl
   0136 46                  280 	ld	b,(hl)
   0137 23                  281 	inc	hl
   0138 56                  282 	ld	d, (hl)
   0139 58                  283 	ld	e, b
   013A 18 DB               284 	jr	00102$
   013C                     285 00104$:
                            286 ;list.c:70: if (!curr)
   013C 7A                  287 	ld	a,d
   013D B3                  288 	or	a,e
   013E 20 07               289 	jr	NZ,00106$
                            290 ;list.c:71: last_error=RESULT_NOT_FOUND;
   0140 21r00s00            291 	ld	hl,#_last_error + 0
   0143 36 05               292 	ld	(hl), #0x05
   0145 18 05               293 	jr	00110$
   0147                     294 00106$:
                            295 ;list.c:73: last_error=RESULT_SUCCESS;
   0147 21r00s00            296 	ld	hl,#_last_error + 0
   014A 36 00               297 	ld	(hl), #0x00
   014C                     298 00110$:
                            299 ;list.c:75: return curr;
   014C EB                  300 	ex	de,hl
   014D DD F9               301 	ld	sp,ix
   014F DD E1               302 	pop	ix
   0151 C9                  303 	ret
   0152                     304 _lst_match_end::
                            305 ;list.c:81: result lst_find(list_header_t *first, list_header_t **last, list_header_t *element) {
                            306 ;	---------------------------------
                            307 ; Function lst_find
                            308 ; ---------------------------------
   0152                     309 _lst_find_start::
   0152                     310 _lst_find:
   0152 DD E5               311 	push	ix
   0154 DD 21 00 00         312 	ld	ix,#0
   0158 DD 39               313 	add	ix,sp
                            314 ;list.c:86: if (first==NULL)
   015A DD 7E 05            315 	ld	a,5 (ix)
   015D DD B6 04            316 	or	a,4 (ix)
   0160 20 09               317 	jr	NZ,00109$
                            318 ;list.c:87: return last_error=RESULT_NOT_FOUND;
   0162 21r00s00            319 	ld	hl,#_last_error + 0
   0165 36 05               320 	ld	(hl), #0x05
   0167 2E 05               321 	ld	l,#0x05
   0169 18 3B               322 	jr	00111$
   016B                     323 00109$:
                            324 ;list.c:89: curr=first;
   016B DD 56 04            325 	ld	d,4 (ix)
   016E DD 5E 05            326 	ld	e,5 (ix)
                            327 ;list.c:90: while (curr && curr!=element) {
   0171                     328 00102$:
   0171 7B                  329 	ld	a,e
   0172 B2                  330 	or	a,d
   0173 28 1D               331 	jr	Z,00104$
   0175 7A                  332 	ld	a,d
   0176 DD 96 08            333 	sub	a, 8 (ix)
   0179 20 06               334 	jr	NZ,00118$
   017B 7B                  335 	ld	a,e
   017C DD 96 09            336 	sub	a, 9 (ix)
   017F 28 11               337 	jr	Z,00104$
   0181                     338 00118$:
                            339 ;list.c:91: *last=curr;
   0181 DD 6E 06            340 	ld	l,6 (ix)
   0184 DD 66 07            341 	ld	h,7 (ix)
   0187 72                  342 	ld	(hl),d
   0188 23                  343 	inc	hl
   0189 73                  344 	ld	(hl),e
                            345 ;list.c:92: curr=curr->next;
   018A 6A                  346 	ld	l,d
   018B 63                  347 	ld	h,e
   018C 4E                  348 	ld	c,(hl)
   018D 23                  349 	inc	hl
   018E 5E                  350 	ld	e, (hl)
   018F 51                  351 	ld	d, c
   0190 18 DF               352 	jr	00102$
   0192                     353 00104$:
                            354 ;list.c:94: if (!curr)
   0192 7B                  355 	ld	a,e
   0193 B2                  356 	or	a,d
   0194 20 09               357 	jr	NZ,00106$
                            358 ;list.c:95: return last_error=RESULT_NOT_FOUND;
   0196 21r00s00            359 	ld	hl,#_last_error + 0
   0199 36 05               360 	ld	(hl), #0x05
   019B 2E 05               361 	ld	l,#0x05
   019D 18 07               362 	jr	00111$
   019F                     363 00106$:
                            364 ;list.c:97: return last_error=RESULT_SUCCESS;
   019F 21r00s00            365 	ld	hl,#_last_error + 0
   01A2 36 00               366 	ld	(hl), #0x00
   01A4 2E 00               367 	ld	l,#0x00
   01A6                     368 00111$:
   01A6 DD E1               369 	pop	ix
   01A8 C9                  370 	ret
   01A9                     371 _lst_find_end::
                            372 	.area _CODE
                            373 	.area _CABS
